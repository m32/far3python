//#line 10
unsigned long INVALID_HANDLE_VALUE = 0xffffffffffffffff;
typedef unsigned long long  HANDLE;

typedef struct _GUID {
    unsigned long  Data1;
    WORD Data2;
    WORD Data3;
    unsigned char  Data4[ 8 ];
} GUID;


typedef struct _FILETIME {
    unsigned long dwLowDateTime;
    unsigned long dwHighDateTime;
} FILETIME;

typedef struct _COORD {
    short X;
    short Y;
} COORD, *PCOORD;

typedef struct _RECT
    {
    long left;
    long top;
    long right;
    long bottom;
} RECT;

typedef struct _KEY_EVENT_RECORD {
    int bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    unsigned long dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;

enum xControlKeyState {
    RIGHT_ALT_PRESSED     =0x0001,
    LEFT_ALT_PRESSED      =0x0002,
    RIGHT_CTRL_PRESSED    =0x0004,
    LEFT_CTRL_PRESSED     =0x0008,
    SHIFT_PRESSED         =0x0010,
    NUMLOCK_ON            =0x0020,
    SCROLLLOCK_ON         =0x0040,
    CAPSLOCK_ON           =0x0080,
    ENHANCED_KEY          =0x0100,
    NLS_DBCSCHAR          =0x00010000,
    NLS_ALPHANUMERIC      =0x00000000,
    NLS_KATAKANA          =0x00020000,
    NLS_HIRAGANA          =0x00040000,
    NLS_ROMAN             =0x00400000,
    NLS_IME_CONVERSION    =0x00800000,
    NLS_IME_DISABLE       =0x20000000
};

typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    unsigned long dwButtonState;
    unsigned long dwControlKeyState;
    unsigned long dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;

enum xButtonState {
    FROM_LEFT_1ST_BUTTON_PRESSED    =0x0001,
    RIGHTMOST_BUTTON_PRESSED        =0x0002,
    FROM_LEFT_2ND_BUTTON_PRESSED    =0x0004,
    FROM_LEFT_3RD_BUTTON_PRESSED    =0x0008,
    FROM_LEFT_4TH_BUTTON_PRESSED    =0x0010
};

enum xEventFlags {
    MOUSE_MOVED    =0x0001,
    DOUBLE_CLICK   =0x0002,
    MOUSE_WHEELED  =0x0004,
    MOUSE_HWHEELED =0x0008
};

typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    int bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;

enum xEventType {
    KEY_EVENT                =0x0001,
    MOUSE_EVENT              =0x0002,
    WINDOW_BUFFER_SIZE_EVENT =0x0004,
    MENU_EVENT               =0x0008,
    FOCUS_EVENT              =0x0010
};


typedef struct _SECURITY_ATTRIBUTES
    {
    unsigned long nLength;
    void * lpSecurityDescriptor;
    int bInheritHandle;
    } 	SECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

enum xVirtualKey {
    VK_BACK = 0x08,
    VK_TAB = 0x09,
    VK_CLEAR = 0x0C,
    VK_RETURN = 0x0D,
    VK_SHIFT = 0x10,
    VK_CONTROL = 0x11,
    VK_MENU = 0x12,
    VK_PAUSE = 0x13,
    VK_CAPITAL = 0x14,
    VK_ESCAPE = 0x1B,
    VK_CONVERT = 0x1C,
    VK_NONCONVERT = 0x1D,
    VK_ACCEPT = 0x1E,
    VK_MODECHANGE = 0x1F,
    VK_SPACE = 0x20,
    VK_PRIOR = 0x21,
    VK_NEXT = 0x22,
    VK_END = 0x23,
    VK_HOME = 0x24,
    VK_LEFT = 0x25,
    VK_UP = 0x26,
    VK_RIGHT = 0x27,
    VK_DOWN = 0x28,
    VK_SELECT = 0x29,
    VK_PRINT = 0x2A,
    VK_EXECUTE = 0x2B,
    VK_SNAPSHOT = 0x2C,
    VK_INSERT = 0x2D,
    VK_DELETE = 0x2E,
    VK_HELP = 0x2F,
    VK_0 = 0x30, VK_9 = 0x39,
    VK_A = 0x41, VK_Z = 0x5A,
    VK_LWIN = 0x5B,
    VK_RWIN = 0x5C,
    VK_APPS = 0x5D,
    VK_SLEEP = 0x5F,
    VK_NUMPAD0 = 0x60,
    VK_NUMPAD1 = 0x61,
    VK_NUMPAD2 = 0x62,
    VK_NUMPAD3 = 0x63,
    VK_NUMPAD4 = 0x64,
    VK_NUMPAD5 = 0x65,
    VK_NUMPAD6 = 0x66,
    VK_NUMPAD7 = 0x67,
    VK_NUMPAD8 = 0x68,
    VK_NUMPAD9 = 0x69,
    VK_MULTIPLY = 0x6A,
    VK_ADD = 0x6B,
    VK_SEPARATOR = 0x6C,
    VK_SUBTRACT = 0x6D,
    VK_DECIMAL = 0x6E,
    VK_DIVIDE = 0x6F,
    VK_F1 = 0x70,
    VK_F2 = 0x71,
    VK_F3 = 0x72,
    VK_F4 = 0x73,
    VK_F5 = 0x74,
    VK_F6 = 0x75,
    VK_F7 = 0x76,
    VK_F8 = 0x77,
    VK_F9 = 0x78,
    VK_F10 = 0x79,
    VK_F11 = 0x7A,
    VK_F12 = 0x7B,
    VK_F13 = 0x7C,
    VK_F14 = 0x7D,
    VK_F15 = 0x7E,
    VK_F16 = 0x7F,
    VK_F17 = 0x80,
    VK_F18 = 0x81,
    VK_F19 = 0x82,
    VK_F20 = 0x83,
    VK_F21 = 0x84,
    VK_F22 = 0x85,
    VK_F23 = 0x86,
    VK_F24 = 0x87,
    VK_NUMLOCK = 0x90,
    VK_SCROLL = 0x91,
    VK_OEM_NEC_EQUAL = 0x92,
    VK_LSHIFT = 0xA0,
    VK_RSHIFT = 0xA1,
    VK_LCONTROL = 0xA2,
    VK_RCONTROL = 0xA3,
    VK_LMENU = 0xA4,
    VK_RMENU = 0xA5,
    VK_BROWSER_BACK = 0xA6,
    VK_BROWSER_FORWARD = 0xA7,
    VK_BROWSER_REFRESH = 0xA8,
    VK_BROWSER_STOP = 0xA9,
    VK_BROWSER_SEARCH = 0xAA,
    VK_BROWSER_FAVORITES = 0xAB,
    VK_BROWSER_HOME = 0xAC,
    VK_VOLUME_MUTE = 0xAD,
    VK_VOLUME_DOWN = 0xAE,
    VK_VOLUME_UP = 0xAF,
    VK_MEDIA_NEXT_TRACK = 0xB0,
    VK_MEDIA_PREV_TRACK = 0xB1,
    VK_MEDIA_STOP = 0xB2,
    VK_MEDIA_PLAY_PAUSE = 0xB3,
    VK_LAUNCH_MAIL = 0xB4,
    VK_LAUNCH_MEDIA_SELECT = 0xB5,
    VK_LAUNCH_APP1 = 0xB6,
    VK_LAUNCH_APP2 = 0xB7,
    VK_OEM_1 = 0xBA,
    VK_OEM_PLUS = 0xBB,
    VK_OEM_COMMA = 0xBC,
    VK_OEM_MINUS = 0xBD,
    VK_OEM_PERIOD = 0xBE,
    VK_OEM_2 = 0xBF,
    VK_OEM_3 = 0xC0,
    VK_OEM_4 = 0xDB,
    VK_OEM_5 = 0xDC,
    VK_OEM_6 = 0xDD,
    VK_OEM_7 = 0xDE,
    VK_OEM_8 = 0xDF,
    VK_OEM_AX = 0xE1,
    VK_OEM_102 = 0xE2,
    VK_ICO_HELP = 0xE3,
    VK_ICO_00 = 0xE4,
    VK_PROCESSKEY = 0xE5,
    VK_ICO_CLEAR = 0xE6,
    VK_PACKET = 0xE7,
    VK_OEM_RESET = 0xE9,
    VK_OEM_JUMP = 0xEA,
    VK_OEM_PA1 = 0xEB,
    VK_OEM_PA2 = 0xEC,
    VK_OEM_PA3 = 0xED,
    VK_OEM_WSCTRL = 0xEE,
    VK_OEM_CUSEL = 0xEF,
    VK_OEM_ATTN = 0xF0,
    VK_OEM_FINISH = 0xF1,
    VK_OEM_COPY = 0xF2,
    VK_OEM_AUTO = 0xF3,
    VK_OEM_ENLW = 0xF4,
    VK_OEM_BACKTAB = 0xF5,
    VK_ATTN = 0xF6,
    VK_CRSEL = 0xF7,
    VK_EXSEL = 0xF8,
    VK_EREOF = 0xF9,
    VK_PLAY = 0xFA,
    VK_ZOOM = 0xFB,
    VK_NONAME = 0xFC,
    VK_PA1 = 0xFD,
    VK_OEM_CLEAR = 0xFE
};
//#line 43 "far3-include/farcolor.hpp"
enum PaletteColors
{
	COL_MENUTEXT,
	COL_MENUSELECTEDTEXT,
	COL_MENUHIGHLIGHT,
	COL_MENUSELECTEDHIGHLIGHT,
	COL_MENUBOX,
	COL_MENUTITLE,

	COL_HMENUTEXT,
	COL_HMENUSELECTEDTEXT,
	COL_HMENUHIGHLIGHT,
	COL_HMENUSELECTEDHIGHLIGHT,

	COL_PANELTEXT,
	COL_PANELSELECTEDTEXT,
	COL_PANELHIGHLIGHTTEXT,
	COL_PANELINFOTEXT,
	COL_PANELCURSOR,
	COL_PANELSELECTEDCURSOR,
	COL_PANELTITLE,
	COL_PANELSELECTEDTITLE,
	COL_PANELCOLUMNTITLE,
	COL_PANELTOTALINFO,
	COL_PANELSELECTEDINFO,

	COL_DIALOGTEXT,
	COL_DIALOGHIGHLIGHTTEXT,
	COL_DIALOGBOX,
	COL_DIALOGBOXTITLE,
	COL_DIALOGHIGHLIGHTBOXTITLE,
	COL_DIALOGEDIT,
	COL_DIALOGBUTTON,
	COL_DIALOGSELECTEDBUTTON,
	COL_DIALOGHIGHLIGHTBUTTON,
	COL_DIALOGHIGHLIGHTSELECTEDBUTTON,

	COL_DIALOGLISTTEXT,
	COL_DIALOGLISTSELECTEDTEXT,
	COL_DIALOGLISTHIGHLIGHT,
	COL_DIALOGLISTSELECTEDHIGHLIGHT,

	COL_WARNDIALOGTEXT,
	COL_WARNDIALOGHIGHLIGHTTEXT,
	COL_WARNDIALOGBOX,
	COL_WARNDIALOGBOXTITLE,
	COL_WARNDIALOGHIGHLIGHTBOXTITLE,
	COL_WARNDIALOGEDIT,
	COL_WARNDIALOGBUTTON,
	COL_WARNDIALOGSELECTEDBUTTON,
	COL_WARNDIALOGHIGHLIGHTBUTTON,
	COL_WARNDIALOGHIGHLIGHTSELECTEDBUTTON,

	COL_KEYBARNUM,
	COL_KEYBARTEXT,
	COL_KEYBARBACKGROUND,

	COL_COMMANDLINE,

	COL_CLOCK,

	COL_VIEWERTEXT,
	COL_VIEWERSELECTEDTEXT,
	COL_VIEWERSTATUS,

	COL_EDITORTEXT,
	COL_EDITORSELECTEDTEXT,
	COL_EDITORSTATUS,

	COL_HELPTEXT,
	COL_HELPHIGHLIGHTTEXT,
	COL_HELPTOPIC,
	COL_HELPSELECTEDTOPIC,
	COL_HELPBOX,
	COL_HELPBOXTITLE,

	COL_PANELDRAGTEXT,
	COL_DIALOGEDITUNCHANGED,
	COL_PANELSCROLLBAR,
	COL_HELPSCROLLBAR,
	COL_PANELBOX,
	COL_PANELSCREENSNUMBER,
	COL_DIALOGEDITSELECTED,
	COL_COMMANDLINESELECTED,
	COL_VIEWERARROWS,

	COL_DIALOGLISTSCROLLBAR,
	COL_MENUSCROLLBAR,
	COL_VIEWERSCROLLBAR,
	COL_COMMANDLINEPREFIX,
	COL_DIALOGDISABLED,
	COL_DIALOGEDITDISABLED,
	COL_DIALOGLISTDISABLED,
	COL_WARNDIALOGDISABLED,
	COL_WARNDIALOGEDITDISABLED,
	COL_WARNDIALOGLISTDISABLED,

	COL_MENUDISABLEDTEXT,

	COL_EDITORCLOCK,
	COL_VIEWERCLOCK,

	COL_DIALOGLISTTITLE,
	COL_DIALOGLISTBOX,

	COL_WARNDIALOGEDITSELECTED,
	COL_WARNDIALOGEDITUNCHANGED,

	COL_DIALOGCOMBOTEXT,
	COL_DIALOGCOMBOSELECTEDTEXT,
	COL_DIALOGCOMBOHIGHLIGHT,
	COL_DIALOGCOMBOSELECTEDHIGHLIGHT,
	COL_DIALOGCOMBOBOX,
	COL_DIALOGCOMBOTITLE,
	COL_DIALOGCOMBODISABLED,
	COL_DIALOGCOMBOSCROLLBAR,

	COL_WARNDIALOGLISTTEXT,
	COL_WARNDIALOGLISTSELECTEDTEXT,
	COL_WARNDIALOGLISTHIGHLIGHT,
	COL_WARNDIALOGLISTSELECTEDHIGHLIGHT,
	COL_WARNDIALOGLISTBOX,
	COL_WARNDIALOGLISTTITLE,
	COL_WARNDIALOGLISTSCROLLBAR,

	COL_WARNDIALOGCOMBOTEXT,
	COL_WARNDIALOGCOMBOSELECTEDTEXT,
	COL_WARNDIALOGCOMBOHIGHLIGHT,
	COL_WARNDIALOGCOMBOSELECTEDHIGHLIGHT,
	COL_WARNDIALOGCOMBOBOX,
	COL_WARNDIALOGCOMBOTITLE,
	COL_WARNDIALOGCOMBODISABLED,
	COL_WARNDIALOGCOMBOSCROLLBAR,

	COL_DIALOGLISTARROWS,
	COL_DIALOGLISTARROWSDISABLED,
	COL_DIALOGLISTARROWSSELECTED,
	COL_DIALOGCOMBOARROWS,
	COL_DIALOGCOMBOARROWSDISABLED,
	COL_DIALOGCOMBOARROWSSELECTED,
	COL_WARNDIALOGLISTARROWS,
	COL_WARNDIALOGLISTARROWSDISABLED,
	COL_WARNDIALOGLISTARROWSSELECTED,
	COL_WARNDIALOGCOMBOARROWS,
	COL_WARNDIALOGCOMBOARROWSDISABLED,
	COL_WARNDIALOGCOMBOARROWSSELECTED,
	COL_MENUARROWS,
	COL_MENUARROWSDISABLED,
	COL_MENUARROWSSELECTED,
	COL_COMMANDLINEUSERSCREEN,
	COL_EDITORSCROLLBAR,

	COL_MENUGRAYTEXT,
	COL_MENUSELECTEDGRAYTEXT,
	COL_DIALOGCOMBOGRAY,
	COL_DIALOGCOMBOSELECTEDGRAYTEXT,
	COL_DIALOGLISTGRAY,
	COL_DIALOGLISTSELECTEDGRAYTEXT,
	COL_WARNDIALOGCOMBOGRAY,
	COL_WARNDIALOGCOMBOSELECTEDGRAYTEXT,
	COL_WARNDIALOGLISTGRAY,
	COL_WARNDIALOGLISTSELECTEDGRAYTEXT,

	COL_DIALOGDEFAULTBUTTON,
	COL_DIALOGSELECTEDDEFAULTBUTTON,
	COL_DIALOGHIGHLIGHTDEFAULTBUTTON,
	COL_DIALOGHIGHLIGHTSELECTEDDEFAULTBUTTON,
	COL_WARNDIALOGDEFAULTBUTTON,
	COL_WARNDIALOGSELECTEDDEFAULTBUTTON,
	COL_WARNDIALOGHIGHLIGHTDEFAULTBUTTON,
	COL_WARNDIALOGHIGHLIGHTSELECTEDDEFAULTBUTTON,

	COL_LASTPALETTECOLOR
};
//#line 71 "far3-include/plugin.hpp"
typedef unsigned long long FARCOLORFLAGS;
static FARCOLORFLAGS
	FCF_FG_INDEX      = 0x0000000000000001ULL,
	FCF_BG_INDEX      = 0x0000000000000002ULL,
	FCF_INDEXMASK     = 0x0000000000000003ULL,


	FCF_FG_4BIT       = 0x0000000000000001ULL,
	FCF_BG_4BIT       = 0x0000000000000002ULL,
	FCF_4BITMASK      = 0x0000000000000003ULL,

	FCF_INHERIT_STYLE = 0x0000000000000004ULL,

	FCF_RAWATTR_MASK  = 0x000000000000FF00ULL,

	FCF_FG_BOLD       = 0x1000000000000000ULL,
	FCF_FG_ITALIC     = 0x2000000000000000ULL,
	FCF_FG_UNDERLINE  = 0x4000000000000000ULL,
	FCF_FG_UNDERLINE2 = 0x8000000000000000ULL,
	FCF_FG_OVERLINE   = 0x0100000000000000ULL,
	FCF_FG_STRIKEOUT  = 0x0200000000000000ULL,
	FCF_FG_FAINT      = 0x0400000000000000ULL,
	FCF_FG_BLINK      = 0x0800000000000000ULL,
	FCF_FG_INVERSE    = 0x0010000000000000ULL,
	FCF_FG_INVISIBLE  = 0x0020000000000000ULL,

	FCF_STYLEMASK     = 0xFFF0000000000000ULL,

	FCF_NONE          = 0;

struct rgba
{
	unsigned char
		r,
		g,
		b,
		a;
};

struct color_index
{
	unsigned char
		i,
		reserved0,
		reserved1,
		a;
};

struct FarColor
{
	FARCOLORFLAGS Flags;
	union
	{
		COLORREF ForegroundColor;
		struct color_index ForegroundIndex;
		struct rgba ForegroundRGBA;
	}

	Foreground

	;
	union
	{
		COLORREF BackgroundColor;
		struct color_index BackgroundIndex;
		struct rgba BackgroundRGBA;
	}

	Background

	;
	unsigned long Reserved[2];
//#line 202 "far3-include/plugin.hpp"
};
//#line 218 "far3-include/plugin.hpp"
typedef unsigned long long COLORDIALOGFLAGS;
static COLORDIALOGFLAGS
	CDF_NONE = 0;

typedef int (WINAPI *FARAPICOLORDIALOG)(
	 GUID* PluginId,
	COLORDIALOGFLAGS Flags,
	struct FarColor *Color
);

typedef unsigned long long FARMESSAGEFLAGS;
static FARMESSAGEFLAGS
	FMSG_WARNING             = 0x0000000000000001ULL,
	FMSG_ERRORTYPE           = 0x0000000000000002ULL,
	FMSG_KEEPBACKGROUND      = 0x0000000000000004ULL,
	FMSG_LEFTALIGN           = 0x0000000000000008ULL,
	FMSG_ALLINONE            = 0x0000000000000010ULL,
	FMSG_MB_OK               = 0x0000000000010000ULL,
	FMSG_MB_OKCANCEL         = 0x0000000000020000ULL,
	FMSG_MB_ABORTRETRYIGNORE = 0x0000000000030000ULL,
	FMSG_MB_YESNO            = 0x0000000000040000ULL,
	FMSG_MB_YESNOCANCEL      = 0x0000000000050000ULL,
	FMSG_MB_RETRYCANCEL      = 0x0000000000060000ULL,
	FMSG_NONE                = 0;

typedef intptr_t (WINAPI *FARAPIMESSAGE)(
	 GUID* PluginId,
	 GUID* Id,
	FARMESSAGEFLAGS Flags,
	 wchar_t *HelpTopic,
	 wchar_t * *Items,
	size_t ItemsNumber,
	intptr_t ButtonsNumber
);

enum FARDIALOGITEMTYPES
{
	DI_TEXT                         =  0,
	DI_VTEXT                        =  1,
	DI_SINGLEBOX                    =  2,
	DI_DOUBLEBOX                    =  3,
	DI_EDIT                         =  4,
	DI_PSWEDIT                      =  5,
	DI_FIXEDIT                      =  6,
	DI_BUTTON                       =  7,
	DI_CHECKBOX                     =  8,
	DI_RADIOBUTTON                  =  9,
	DI_COMBOBOX                     = 10,
	DI_LISTBOX                      = 11,

	DI_USERCONTROL                  =255,
};
//#line 291 "far3-include/plugin.hpp"
typedef unsigned long long FARDIALOGITEMFLAGS;
static FARDIALOGITEMFLAGS
	DIF_BOXCOLOR              = 0x0000000000000200ULL,
	DIF_GROUP                 = 0x0000000000000400ULL,
	DIF_LEFTTEXT              = 0x0000000000000800ULL,
	DIF_MOVESELECT            = 0x0000000000001000ULL,
	DIF_SHOWAMPERSAND         = 0x0000000000002000ULL,
	DIF_CENTERGROUP           = 0x0000000000004000ULL,
	DIF_NOBRACKETS            = 0x0000000000008000ULL,
	DIF_MANUALADDHISTORY      = 0x0000000000008000ULL,
	DIF_SEPARATOR             = 0x0000000000010000ULL,
	DIF_SEPARATOR2            = 0x0000000000020000ULL,
	DIF_EDITOR                = 0x0000000000020000ULL,
	DIF_LISTNOAMPERSAND       = 0x0000000000020000ULL,
	DIF_LISTNOBOX             = 0x0000000000040000ULL,
	DIF_HISTORY               = 0x0000000000040000ULL,
	DIF_BTNNOCLOSE            = 0x0000000000040000ULL,
	DIF_CENTERTEXT            = 0x0000000000040000ULL,
	DIF_SEPARATORUSER         = 0x0000000000080000ULL,
	DIF_SETSHIELD             = 0x0000000000080000ULL,
	DIF_EDITEXPAND            = 0x0000000000080000ULL,
	DIF_DROPDOWNLIST          = 0x0000000000100000ULL,
	DIF_USELASTHISTORY        = 0x0000000000200000ULL,
	DIF_MASKEDIT              = 0x0000000000400000ULL,
	DIF_LISTTRACKMOUSE        = 0x0000000000400000ULL,
	DIF_LISTTRACKMOUSEINFOCUS = 0x0000000000800000ULL,
	DIF_SELECTONENTRY         = 0x0000000000800000ULL,
	DIF_3STATE                = 0x0000000000800000ULL,
	DIF_EDITPATH              = 0x0000000001000000ULL,
	DIF_LISTWRAPMODE          = 0x0000000001000000ULL,
	DIF_NOAUTOCOMPLETE        = 0x0000000002000000ULL,
	DIF_LISTAUTOHIGHLIGHT     = 0x0000000002000000ULL,
	DIF_LISTNOCLOSE           = 0x0000000004000000ULL,
	DIF_EDITPATHEXEC          = 0x0000000004000000ULL,
	DIF_HIDDEN                = 0x0000000010000000ULL,
	DIF_READONLY              = 0x0000000020000000ULL,
	DIF_NOFOCUS               = 0x0000000040000000ULL,
	DIF_DISABLE               = 0x0000000080000000ULL,
	DIF_DEFAULTBUTTON         = 0x0000000100000000ULL,
	DIF_FOCUS                 = 0x0000000200000000ULL,
	DIF_RIGHTTEXT             = 0x0000000400000000ULL,
	DIF_WORDWRAP              = 0x0000000800000000ULL,
	DIF_NONE                  = 0;

enum FARMESSAGE
{
	DM_FIRST                        = 0,
	DM_CLOSE                        = 1,
	DM_ENABLE                       = 2,
	DM_ENABLEREDRAW                 = 3,
	DM_GETDLGDATA                   = 4,
	DM_GETDLGITEM                   = 5,
	DM_GETDLGRECT                   = 6,
	DM_GETTEXT                      = 7,
	DM_KEY                          = 9,
	DM_MOVEDIALOG                   = 10,
	DM_SETDLGDATA                   = 11,
	DM_SETDLGITEM                   = 12,
	DM_SETFOCUS                     = 13,
	DM_REDRAW                       = 14,
	DM_SETTEXT                      = 15,
	DM_SETMAXTEXTLENGTH             = 16,
	DM_SHOWDIALOG                   = 17,
	DM_GETFOCUS                     = 18,
	DM_GETCURSORPOS                 = 19,
	DM_SETCURSORPOS                 = 20,
	DM_SETTEXTPTR                   = 22,
	DM_SHOWITEM                     = 23,
	DM_ADDHISTORY                   = 24,

	DM_GETCHECK                     = 25,
	DM_SETCHECK                     = 26,
	DM_SET3STATE                    = 27,

	DM_LISTSORT                     = 28,
	DM_LISTGETITEM                  = 29,
	DM_LISTGETCURPOS                = 30,
	DM_LISTSETCURPOS                = 31,
	DM_LISTDELETE                   = 32,
	DM_LISTADD                      = 33,
	DM_LISTADDSTR                   = 34,
	DM_LISTUPDATE                   = 35,
	DM_LISTINSERT                   = 36,
	DM_LISTFINDSTRING               = 37,
	DM_LISTINFO                     = 38,
	DM_LISTGETDATA                  = 39,
	DM_LISTSETDATA                  = 40,
	DM_LISTSETTITLES                = 41,
	DM_LISTGETTITLES                = 42,

	DM_RESIZEDIALOG                 = 43,
	DM_SETITEMPOSITION              = 44,

	DM_GETDROPDOWNOPENED            = 45,
	DM_SETDROPDOWNOPENED            = 46,

	DM_SETHISTORY                   = 47,

	DM_GETITEMPOSITION              = 48,
	DM_SETINPUTNOTIFY               = 49,
	DM_SETMOUSEEVENTNOTIFY          = DM_SETINPUTNOTIFY,

	DM_EDITUNCHANGEDFLAG            = 50,

	DM_GETITEMDATA                  = 51,
	DM_SETITEMDATA                  = 52,

	DM_LISTSET                      = 53,

	DM_GETCURSORSIZE                = 54,
	DM_SETCURSORSIZE                = 55,

	DM_LISTGETDATASIZE              = 56,

	DM_GETSELECTION                 = 57,
	DM_SETSELECTION                 = 58,

	DM_GETEDITPOSITION              = 59,
	DM_SETEDITPOSITION              = 60,

	DM_SETCOMBOBOXEVENT             = 61,
	DM_GETCOMBOBOXEVENT             = 62,

	DM_GETCONSTTEXTPTR              = 63,
	DM_GETDLGITEMSHORT              = 64,
	DM_SETDLGITEMSHORT              = 65,

	DM_GETDIALOGINFO                = 66,

	DM_GETDIALOGTITLE               = 67,

	DN_FIRST                        = 4096,
	DN_BTNCLICK                     = 4097,
	DN_CTLCOLORDIALOG               = 4098,
	DN_CTLCOLORDLGITEM              = 4099,
	DN_CTLCOLORDLGLIST              = 4100,
	DN_DRAWDIALOG                   = 4101,
	DN_DRAWDLGITEM                  = 4102,
	DN_EDITCHANGE                   = 4103,
	DN_GOTFOCUS                     = 4105,
	DN_HELP                         = 4106,
	DN_HOTKEY                       = 4107,
	DN_INITDIALOG                   = 4108,
	DN_KILLFOCUS                    = 4109,
	DN_LISTCHANGE                   = 4110,
	DN_DRAGGED                      = 4111,
	DN_RESIZECONSOLE                = 4112,
	DN_DRAWDIALOGDONE               = 4113,
	DN_LISTHOTKEY                   = 4114,
	DN_INPUT                        = 4115,
	DN_CONTROLINPUT                 = 4116,
	DN_CLOSE                        = 4117,
	DN_GETVALUE                     = 4118,
	DN_DROPDOWNOPENED               = 4119,
	DN_DRAWDLGITEMDONE              = 4120,

	DM_USER                         = 0x4000,

};

enum FARCHECKEDSTATE
{
	BSTATE_UNCHECKED = 0,
	BSTATE_CHECKED   = 1,
	BSTATE_3STATE    = 2,
	BSTATE_TOGGLE    = 3,
};

enum FARCOMBOBOXEVENTTYPE
{
	CBET_KEY         = 0x00000001,
	CBET_MOUSE       = 0x00000002,
};

typedef unsigned long long LISTITEMFLAGS;
static LISTITEMFLAGS
	LIF_SELECTED           = 0x0000000000010000ULL,
	LIF_CHECKED            = 0x0000000000020000ULL,
	LIF_SEPARATOR          = 0x0000000000040000ULL,
	LIF_DISABLE            = 0x0000000000080000ULL,
	LIF_GRAYED             = 0x0000000000100000ULL,
	LIF_HIDDEN             = 0x0000000000200000ULL,
	LIF_DELETEUSERDATA     = 0x0000000080000000ULL,
	LIF_NONE               = 0;



struct FarListItem
{
	LISTITEMFLAGS Flags;
	 wchar_t *Text;
	intptr_t UserData;
	intptr_t Reserved;
};

struct FarListUpdate
{
	size_t StructSize;
	intptr_t Index;
	struct FarListItem Item;
};

struct FarListInsert
{
	size_t StructSize;
	intptr_t Index;
	struct FarListItem Item;
};

struct FarListGetItem
{
	size_t StructSize;
	intptr_t ItemIndex;
	struct FarListItem Item;
};

struct FarListPos
{
	size_t StructSize;
	intptr_t SelectPos;
	intptr_t TopPos;
};

typedef unsigned long long FARLISTFINDFLAGS;
static FARLISTFINDFLAGS
	LIFIND_EXACTMATCH = 0x0000000000000001ULL,
	LIFIND_NONE       = 0;


struct FarListFind
{
	size_t StructSize;
	intptr_t StartIndex;
	 wchar_t *Pattern;
	FARLISTFINDFLAGS Flags;
};

struct FarListDelete
{
	size_t StructSize;
	intptr_t StartIndex;
	intptr_t Count;
};

typedef unsigned long long FARLISTINFOFLAGS;
static FARLISTINFOFLAGS
	LINFO_SHOWNOBOX             = 0x0000000000000400ULL,
	LINFO_AUTOHIGHLIGHT         = 0x0000000000000800ULL,
	LINFO_REVERSEHIGHLIGHT      = 0x0000000000001000ULL,
	LINFO_WRAPMODE              = 0x0000000000008000ULL,
	LINFO_SHOWAMPERSAND         = 0x0000000000010000ULL,
	LINFO_NONE                  = 0;

struct FarListInfo
{
	size_t StructSize;
	FARLISTINFOFLAGS Flags;
	size_t ItemsNumber;
	intptr_t SelectPos;
	intptr_t TopPos;
	intptr_t MaxHeight;
	intptr_t MaxLength;
};

struct FarListItemData
{
	size_t StructSize;
	intptr_t Index;
	size_t DataSize;
	void *Data;
};

struct FarList
{
	size_t StructSize;
	size_t ItemsNumber;
	struct FarListItem *Items;
};

struct FarListTitles
{
	size_t StructSize;
	size_t TitleSize;
	 wchar_t *Title;
	size_t BottomSize;
	 wchar_t *Bottom;
};

struct FarDialogItemColors
{
	size_t StructSize;
	unsigned long long Flags;
	size_t ColorsCount;
	struct FarColor* Colors;
};

struct FAR_CHAR_INFO
{
	wchar_t Char;
	struct FarColor Attributes;
//#line 603 "far3-include/plugin.hpp"
};

struct FarDialogItem
{
	enum FARDIALOGITEMTYPES Type;
	intptr_t X1,Y1,X2,Y2;
	union
	{
		intptr_t Selected;
		struct FarList *ListItems;
		struct FAR_CHAR_INFO *VBuf;
		intptr_t Reserved0;
	}

	Param

	;
	 wchar_t *History;
	 wchar_t *Mask;
	FARDIALOGITEMFLAGS Flags;
	 wchar_t *Data;
	size_t MaxLength;
	intptr_t UserData;
	intptr_t Reserved[2];
};

struct FarDialogItemData
{
	size_t StructSize;
	size_t  PtrLength;
	wchar_t *PtrData;
};

struct FarDialogEvent
{
	size_t StructSize;
	HANDLE hDlg;
	intptr_t Msg;
	intptr_t Param1;
	void* Param2;
	intptr_t Result;
};

struct OpenDlgPluginData
{
	size_t StructSize;
	HANDLE hDlg;
};

struct DialogInfo
{
	size_t StructSize;
	GUID Id;
	GUID Owner;
};

struct FarGetDialogItem
{
	size_t StructSize;
	size_t Size;
	struct FarDialogItem* Item;
};

typedef unsigned long long FARDIALOGFLAGS;
static FARDIALOGFLAGS
	FDLG_WARNING             = 0x0000000000000001ULL,
	FDLG_SMALLDIALOG         = 0x0000000000000002ULL,
	FDLG_NODRAWSHADOW        = 0x0000000000000004ULL,
	FDLG_NODRAWPANEL         = 0x0000000000000008ULL,
	FDLG_KEEPCONSOLETITLE    = 0x0000000000000010ULL,
	FDLG_NONMODAL            = 0x0000000000000020ULL,
	FDLG_NONE                = 0;

typedef intptr_t(WINAPI *FARWINDOWPROC)(
	HANDLE   hDlg,
	intptr_t Msg,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t(WINAPI *FARAPISENDDLGMESSAGE)(
	HANDLE   hDlg,
	intptr_t Msg,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t(WINAPI *FARAPIDEFDLGPROC)(
	HANDLE   hDlg,
	intptr_t Msg,
	intptr_t Param1,
	void* Param2
);

typedef HANDLE(WINAPI *FARAPIDIALOGINIT)(
	 GUID*           PluginId,
	 GUID*           Id,
	intptr_t              X1,
	intptr_t              Y1,
	intptr_t              X2,
	intptr_t              Y2,
	 wchar_t        *HelpTopic,
	 struct FarDialogItem *Item,
	size_t                ItemsNumber,
	intptr_t              Reserved,
	FARDIALOGFLAGS        Flags,
	FARWINDOWPROC         DlgProc,
	void*                 Param
);

typedef intptr_t (WINAPI *FARAPIDIALOGRUN)(
	HANDLE hDlg
);

typedef void (WINAPI *FARAPIDIALOGFREE)(
	HANDLE hDlg
);

struct FarKey
{
	WORD VirtualKeyCode;
	unsigned long ControlKeyState;
};

typedef unsigned long long MENUITEMFLAGS;
static MENUITEMFLAGS
	MIF_SELECTED   = 0x0000000000010000ULL,
	MIF_CHECKED    = 0x0000000000020000ULL,
	MIF_SEPARATOR  = 0x0000000000040000ULL,
	MIF_DISABLE    = 0x0000000000080000ULL,
	MIF_GRAYED     = 0x0000000000100000ULL,
	MIF_HIDDEN     = 0x0000000000200000ULL,
	MIF_NONE       = 0;

struct FarMenuItem
{
	MENUITEMFLAGS Flags;
	 wchar_t *Text;
	struct FarKey AccelKey;
	intptr_t UserData;
	intptr_t Reserved[2];
};

typedef unsigned long long FARMENUFLAGS;
static FARMENUFLAGS
	FMENU_SHOWAMPERSAND        = 0x0000000000000001ULL,
	FMENU_WRAPMODE             = 0x0000000000000002ULL,
	FMENU_AUTOHIGHLIGHT        = 0x0000000000000004ULL,
	FMENU_REVERSEAUTOHIGHLIGHT = 0x0000000000000008ULL,
	FMENU_CHANGECONSOLETITLE   = 0x0000000000000010ULL,
	FMENU_SHOWNOBOX            = 0x0000000000000020ULL,
	FMENU_SHOWSHORTBOX         = 0x0000000000000040ULL,
	FMENU_SHOWSINGLEBOX        = 0x0000000000000080ULL,
	FMENU_NODRAWSHADOW         = 0x0000000000000100ULL,
	FMENU_NONE                 = 0;

typedef intptr_t (WINAPI *FARAPIMENU)(
	 GUID*         PluginId,
	 GUID*         Id,
	intptr_t            X,
	intptr_t            Y,
	intptr_t            MaxHeight,
	FARMENUFLAGS        Flags,
	 wchar_t      *Title,
	 wchar_t      *Bottom,
	 wchar_t      *HelpTopic,
	 struct FarKey *BreakKeys,
	intptr_t           *BreakCode,
	 struct FarMenuItem *Item,
	size_t              ItemsNumber
);


typedef unsigned long long PLUGINPANELITEMFLAGS;
static PLUGINPANELITEMFLAGS

	PPIF_SELECTED               = 0x0000000040000000ULL,
	PPIF_PROCESSDESCR           = 0x0000000080000000ULL,

	PPIF_NONE                   = 0;

struct FarPanelItemFreeInfo
{
	size_t StructSize;
	HANDLE hPlugin;
};

typedef void (WINAPI *FARPANELITEMFREECALLBACK)(void* UserData, struct FarPanelItemFreeInfo* Info);

struct UserDataItem
{
	void* Data;
	FARPANELITEMFREECALLBACK FreeData;
};


struct PluginPanelItem
{
	FILETIME CreationTime;
	FILETIME LastAccessTime;
	FILETIME LastWriteTime;
	FILETIME ChangeTime;
	unsigned long long FileSize;
	unsigned long long AllocationSize;
	 wchar_t *FileName;
	 wchar_t *AlternateFileName;
	 wchar_t *Description;
	 wchar_t *Owner;
	 wchar_t * *CustomColumnData;
	size_t CustomColumnNumber;
	PLUGINPANELITEMFLAGS Flags;
	struct UserDataItem UserData;
	uintptr_t FileAttributes;
	uintptr_t NumberOfLinks;
	uintptr_t CRC32;
	intptr_t Reserved[2];
};

struct FarGetPluginPanelItem
{
	size_t StructSize;
	size_t Size;
	struct PluginPanelItem* Item;
};

struct SortingPanelItem
{
	FILETIME CreationTime;
	FILETIME LastAccessTime;
	FILETIME LastWriteTime;
	FILETIME ChangeTime;
	unsigned long long FileSize;
	unsigned long long AllocationSize;
	 wchar_t *FileName;
	 wchar_t *AlternateFileName;
	 wchar_t *Description;
	 wchar_t *Owner;
	 wchar_t * *CustomColumnData;
	size_t CustomColumnNumber;
	PLUGINPANELITEMFLAGS Flags;
	struct UserDataItem UserData;
	uintptr_t FileAttributes;
	uintptr_t NumberOfLinks;
	uintptr_t CRC32;
	intptr_t Position;
	intptr_t SortGroup;
	uintptr_t NumberOfStreams;
	unsigned long long StreamsSize;
};

typedef unsigned long long PANELINFOFLAGS;
static PANELINFOFLAGS
	PFLAGS_SHOWHIDDEN         = 0x0000000000000001ULL,
	PFLAGS_HIGHLIGHT          = 0x0000000000000002ULL,
	PFLAGS_REVERSESORTORDER   = 0x0000000000000004ULL,
	PFLAGS_USESORTGROUPS      = 0x0000000000000008ULL,
	PFLAGS_SELECTEDFIRST      = 0x0000000000000010ULL,
	PFLAGS_REALNAMES          = 0x0000000000000020ULL,
	PFLAGS_PANELLEFT          = 0x0000000000000080ULL,
	PFLAGS_DIRECTORIESFIRST   = 0x0000000000000100ULL,
	PFLAGS_USECRC32           = 0x0000000000000200ULL,
	PFLAGS_PLUGIN             = 0x0000000000000800ULL,
	PFLAGS_VISIBLE            = 0x0000000000001000ULL,
	PFLAGS_FOCUS              = 0x0000000000002000ULL,
	PFLAGS_ALTERNATIVENAMES   = 0x0000000000004000ULL,
	PFLAGS_SHORTCUT           = 0x0000000000008000ULL,
	PFLAGS_NONE               = 0;

enum PANELINFOTYPE
{
	PTYPE_FILEPANEL                 = 0,
	PTYPE_TREEPANEL                 = 1,
	PTYPE_QVIEWPANEL                = 2,
	PTYPE_INFOPANEL                 = 3,
};

enum OPENPANELINFO_SORTMODES
{
	SM_DEFAULT                   =  0,
	SM_UNSORTED                  =  1,
	SM_NAME                      =  2,
	SM_FULLNAME                  =  SM_NAME,
	SM_EXT                       =  3,
	SM_MTIME                     =  4,
	SM_CTIME                     =  5,
	SM_ATIME                     =  6,
	SM_SIZE                      =  7,
	SM_DESCR                     =  8,
	SM_OWNER                     =  9,
	SM_COMPRESSEDSIZE            = 10,
	SM_NUMLINKS                  = 11,
	SM_NUMSTREAMS                = 12,
	SM_STREAMSSIZE               = 13,
	SM_NAMEONLY                  = 14,
	SM_CHTIME                    = 15,

	SM_COUNT,

	SM_USER                      = 100000
};

struct PanelInfo
{
	size_t StructSize;
	HANDLE PluginHandle;
	GUID OwnerGuid;
	PANELINFOFLAGS Flags;
	size_t ItemsNumber;
	size_t SelectedItemsNumber;
	RECT PanelRect;
	size_t CurrentItem;
	size_t TopPanelItem;
	intptr_t ViewMode;
	enum PANELINFOTYPE PanelType;
	enum OPENPANELINFO_SORTMODES SortMode;
};


struct PanelRedrawInfo
{
	size_t StructSize;
	size_t CurrentItem;
	size_t TopPanelItem;
};

struct CmdLineSelect
{
	size_t StructSize;
	intptr_t SelStart;
	intptr_t SelEnd;
};

struct FarPanelDirectory
{
	size_t StructSize;
	 wchar_t* Name;
	 wchar_t* Param;
	GUID PluginId;
	 wchar_t* File;
};






enum FILE_CONTROL_COMMANDS
{
	FCTL_CLOSEPANEL                 = 0,
	FCTL_GETPANELINFO               = 1,
	FCTL_UPDATEPANEL                = 2,
	FCTL_REDRAWPANEL                = 3,
	FCTL_GETCMDLINE                 = 4,
	FCTL_SETCMDLINE                 = 5,
	FCTL_SETSELECTION               = 6,
	FCTL_SETVIEWMODE                = 7,
	FCTL_INSERTCMDLINE              = 8,
	FCTL_SETUSERSCREEN              = 9,
	FCTL_SETPANELDIRECTORY          = 10,
	FCTL_SETCMDLINEPOS              = 11,
	FCTL_GETCMDLINEPOS              = 12,
	FCTL_SETSORTMODE                = 13,
	FCTL_SETSORTORDER               = 14,
	FCTL_SETCMDLINESELECTION        = 15,
	FCTL_GETCMDLINESELECTION        = 16,
	FCTL_CHECKPANELSEXIST           = 17,
	FCTL_GETUSERSCREEN              = 19,
	FCTL_ISACTIVEPANEL              = 20,
	FCTL_GETPANELITEM               = 21,
	FCTL_GETSELECTEDPANELITEM       = 22,
	FCTL_GETCURRENTPANELITEM        = 23,
	FCTL_GETPANELDIRECTORY          = 24,
	FCTL_GETCOLUMNTYPES             = 25,
	FCTL_GETCOLUMNWIDTHS            = 26,
	FCTL_BEGINSELECTION             = 27,
	FCTL_ENDSELECTION               = 28,
	FCTL_CLEARSELECTION             = 29,
	FCTL_SETDIRECTORIESFIRST        = 30,
	FCTL_GETPANELFORMAT             = 31,
	FCTL_GETPANELHOSTFILE           = 32,
	FCTL_GETPANELPREFIX             = 34,
	FCTL_SETACTIVEPANEL             = 35,
};

typedef void (WINAPI *FARAPITEXT)(
	intptr_t X,
	intptr_t Y,
	 struct FarColor* Color,
	 wchar_t *Str
);

typedef HANDLE(WINAPI *FARAPISAVESCREEN)(intptr_t X1, intptr_t Y1, intptr_t X2, intptr_t Y2);

typedef void (WINAPI *FARAPIRESTORESCREEN)(HANDLE hScreen);

typedef void (WINAPI *FARAPIFREESCREEN)(HANDLE hScreen);


typedef intptr_t (WINAPI *FARAPIGETDIRLIST)(
	 wchar_t *Dir,
	struct PluginPanelItem **pPanelItem,
	size_t *pItemsNumber
);

typedef intptr_t (WINAPI *FARAPIGETPLUGINDIRLIST)(
	 GUID* PluginId,
	HANDLE hPanel,
	 wchar_t *Dir,
	struct PluginPanelItem **pPanelItem,
	size_t *pItemsNumber
);

typedef void (WINAPI *FARAPIFREEDIRLIST)(struct PluginPanelItem *PanelItem, size_t nItemsNumber);
typedef void (WINAPI *FARAPIFREEPLUGINDIRLIST)(HANDLE hPanel, struct PluginPanelItem *PanelItem, size_t nItemsNumber);

typedef unsigned long long VIEWER_FLAGS;
static VIEWER_FLAGS
	VF_NONMODAL              = 0x0000000000000001ULL,
	VF_DELETEONCLOSE         = 0x0000000000000002ULL,
	VF_ENABLE_F6             = 0x0000000000000004ULL,
	VF_DISABLEHISTORY        = 0x0000000000000008ULL,
	VF_IMMEDIATERETURN       = 0x0000000000000100ULL,
	VF_DELETEONLYFILEONCLOSE = 0x0000000000000200ULL,
	VF_NONE                  = 0;

typedef intptr_t (WINAPI *FARAPIVIEWER)(
	 wchar_t *FileName,
	 wchar_t *Title,
	intptr_t X1,
	intptr_t Y1,
	intptr_t X2,
	intptr_t Y2,
	VIEWER_FLAGS Flags,
	uintptr_t CodePage
);

typedef unsigned long long EDITOR_FLAGS;
static EDITOR_FLAGS
	EF_NONMODAL              = 0x0000000000000001ULL,
	EF_CREATENEW             = 0x0000000000000002ULL,
	EF_ENABLE_F6             = 0x0000000000000004ULL,
	EF_DISABLEHISTORY        = 0x0000000000000008ULL,
	EF_DELETEONCLOSE         = 0x0000000000000010ULL,
	EF_IMMEDIATERETURN       = 0x0000000000000100ULL,
	EF_DELETEONLYFILEONCLOSE = 0x0000000000000200ULL,
	EF_LOCKED                = 0x0000000000000400ULL,
	EF_DISABLESAVEPOS        = 0x0000000000000800ULL,
	EF_OPENMODE_MASK         = 0x00000000F0000000ULL,
	EF_OPENMODE_QUERY        = 0x0000000000000000ULL,
	EF_OPENMODE_NEWIFOPEN    = 0x0000000010000000ULL,
	EF_OPENMODE_USEEXISTING  = 0x0000000020000000ULL,
	EF_OPENMODE_BREAKIFOPEN  = 0x0000000030000000ULL,
	EF_OPENMODE_RELOADIFOPEN = 0x0000000040000000ULL,
	EN_NONE                  = 0;

enum EDITOR_EXITCODE
{
	EEC_OPEN_ERROR          = 0,
	EEC_MODIFIED            = 1,
	EEC_NOT_MODIFIED        = 2,
	EEC_LOADING_INTERRUPTED = 3,
};

typedef intptr_t (WINAPI *FARAPIEDITOR)(
	 wchar_t *FileName,
	 wchar_t *Title,
	intptr_t X1,
	intptr_t Y1,
	intptr_t X2,
	intptr_t Y2,
	EDITOR_FLAGS Flags,
	intptr_t StartLine,
	intptr_t StartChar,
	uintptr_t CodePage
);

typedef wchar_t*(WINAPI *FARAPIGETMSG)(
	 GUID* PluginId,
	intptr_t MsgId
);

typedef unsigned long long FARHELPFLAGS;
static FARHELPFLAGS
	FHELP_NOSHOWERROR = 0x0000000080000000ULL,
	FHELP_SELFHELP    = 0x0000000000000000ULL,
	FHELP_FARHELP     = 0x0000000000000001ULL,
	FHELP_CUSTOMFILE  = 0x0000000000000002ULL,
	FHELP_CUSTOMPATH  = 0x0000000000000004ULL,
	FHELP_GUID        = 0x0000000000000008ULL,
	FHELP_USECONTENTS = 0x0000000040000000ULL,
	FHELP_NONE        = 0;

typedef int (WINAPI *FARAPISHOWHELP)(
	 wchar_t *ModuleName,
	 wchar_t *Topic,
	FARHELPFLAGS Flags
);

enum ADVANCED_CONTROL_COMMANDS
{
	ACTL_GETFARMANAGERVERSION       = 0,
	ACTL_WAITKEY                    = 2,
	ACTL_GETCOLOR                   = 3,
	ACTL_GETARRAYCOLOR              = 4,

	ACTL_GETWINDOWINFO              = 6,
	ACTL_GETWINDOWCOUNT             = 7,
	ACTL_SETCURRENTWINDOW           = 8,
	ACTL_COMMIT                     = 9,
	ACTL_GETFARHWND                 = 10,
	ACTL_SETARRAYCOLOR              = 16,
	ACTL_REDRAWALL                  = 19,
	ACTL_SYNCHRO                    = 20,
	ACTL_SETPROGRESSSTATE           = 21,
	ACTL_SETPROGRESSVALUE           = 22,
	ACTL_QUIT                       = 23,
	ACTL_GETFARRECT                 = 24,
	ACTL_GETCURSORPOS               = 25,
	ACTL_SETCURSORPOS               = 26,
	ACTL_PROGRESSNOTIFY             = 27,
	ACTL_GETWINDOWTYPE              = 28,
};

enum FAR_MACRO_CONTROL_COMMANDS
{
	MCTL_LOADALL           = 0,
	MCTL_SAVEALL           = 1,
	MCTL_SENDSTRING        = 2,
	MCTL_GETSTATE          = 5,
	MCTL_GETAREA           = 6,
	MCTL_ADDMACRO          = 7,
	MCTL_DELMACRO          = 8,
	MCTL_GETLASTERROR      = 9,
	MCTL_EXECSTRING        = 10,
};

typedef unsigned long long FARKEYMACROFLAGS;
static FARKEYMACROFLAGS
	KMFLAGS_SILENTCHECK         = 0x0000000000000001,
	KMFLAGS_NOSENDKEYSTOPLUGINS = 0x0000000000000002,
	KMFLAGS_ENABLEOUTPUT        = 0x0000000000000004,
	KMFLAGS_LANGMASK            = 0x0000000000000070,
	KMFLAGS_LUA                 = 0x0000000000000000,
	KMFLAGS_MOONSCRIPT          = 0x0000000000000010,
	KMFLAGS_NONE                = 0;

enum FARMACROSENDSTRINGCOMMAND
{
	MSSC_POST              =0,
	MSSC_CHECK             =2,
};

enum FARMACROAREA
{
	MACROAREA_OTHER                      =   0,
	MACROAREA_SHELL                      =   1,
	MACROAREA_VIEWER                     =   2,
	MACROAREA_EDITOR                     =   3,
	MACROAREA_DIALOG                     =   4,
	MACROAREA_SEARCH                     =   5,
	MACROAREA_DISKS                      =   6,
	MACROAREA_MAINMENU                   =   7,
	MACROAREA_MENU                       =   8,
	MACROAREA_HELP                       =   9,
	MACROAREA_INFOPANEL                  =  10,
	MACROAREA_QVIEWPANEL                 =  11,
	MACROAREA_TREEPANEL                  =  12,
	MACROAREA_FINDFOLDER                 =  13,
	MACROAREA_USERMENU                   =  14,
	MACROAREA_SHELLAUTOCOMPLETION        =  15,
	MACROAREA_DIALOGAUTOCOMPLETION       =  16,
	MACROAREA_GRABBER                    =  17,
	MACROAREA_DESKTOP                    =  18,

	MACROAREA_COMMON                     = 255,
};

enum FARMACROSTATE
{
	MACROSTATE_NOMACRO          = 0,
	MACROSTATE_EXECUTING        = 1,
	MACROSTATE_EXECUTING_COMMON = 2,
	MACROSTATE_RECORDING        = 3,
	MACROSTATE_RECORDING_COMMON = 4,
};

enum FARMACROPARSEERRORCODE
{
	MPEC_SUCCESS = 0,
	MPEC_ERROR   = 1,
};

struct MacroParseResult
{
	size_t StructSize;
	unsigned long ErrCode;
	COORD ErrPos;
	 wchar_t *ErrSrc;
};


struct MacroSendMacroText
{
	size_t StructSize;
	FARKEYMACROFLAGS Flags;
	INPUT_RECORD AKey;
	 wchar_t *SequenceText;
};

typedef unsigned long long FARADDKEYMACROFLAGS;
static FARADDKEYMACROFLAGS
	AKMFLAGS_NONE                = 0;

typedef intptr_t (WINAPI *FARMACROCALLBACK)(void* Id,FARADDKEYMACROFLAGS Flags);


struct MacroAddMacro
{
	size_t StructSize;
	void* Id;
	 wchar_t *SequenceText;
	 wchar_t *Description;
	FARKEYMACROFLAGS Flags;
	INPUT_RECORD AKey;
	enum FARMACROAREA Area;
	FARMACROCALLBACK Callback;
	intptr_t Priority;
};

enum FARMACROVARTYPE
{
	FMVT_UNKNOWN                = 0,
	FMVT_INTEGER                = 1,
	FMVT_STRING                 = 2,
	FMVT_DOUBLE                 = 3,
	FMVT_BOOLEAN                = 4,
	FMVT_BINARY                 = 5,
	FMVT_POINTER                = 6,
	FMVT_NIL                    = 7,
	FMVT_ARRAY                  = 8,
	FMVT_PANEL                  = 9,
	FMVT_ERROR                  = 10,
};

struct FarMacroValue
{
	enum FARMACROVARTYPE Type;
	union
	{
		long long        Integer;
		long long        Boolean;
		double         Double;
		 wchar_t *String;
		void          *Pointer;
		struct
		{
			void *Data;
			size_t Size;
		} Binary;
		struct
		{
			struct FarMacroValue *Values;
			size_t Count;
		} Array;
	}

	Value

	;
//#line 1285 "far3-include/plugin.hpp"
};

struct FarMacroCall
{
	size_t StructSize;
	size_t Count;
	struct FarMacroValue *Values;
	void (WINAPI *Callback)(void *CallbackData, struct FarMacroValue *Values, size_t Count);
	void *CallbackData;
};

struct FarGetValue
{
	size_t StructSize;
	intptr_t Type;
	struct FarMacroValue Value;
};

struct MacroExecuteString
{
	size_t StructSize;
	FARKEYMACROFLAGS Flags;
	 wchar_t *SequenceText;
	size_t InCount;
	struct FarMacroValue *InValues;
	size_t OutCount;
	 struct FarMacroValue *OutValues;
};

struct FarMacroLoad
{
	size_t StructSize;
	 wchar_t *Path;
	unsigned long long Flags;
};

typedef unsigned long long FARSETCOLORFLAGS;
static FARSETCOLORFLAGS
	FSETCLR_REDRAW                 = 0x0000000000000001ULL,
	FSETCLR_NONE                   = 0;

struct FarSetColors
{
	size_t StructSize;
	FARSETCOLORFLAGS Flags;
	size_t StartIndex;
	size_t ColorsCount;
	struct FarColor* Colors;
};

enum WINDOWINFO_TYPE
{
	WTYPE_UNKNOWN                   = -1,
	WTYPE_DESKTOP                   = 0,
	WTYPE_PANELS                    = 1,
	WTYPE_VIEWER                    = 2,
	WTYPE_EDITOR                    = 3,
	WTYPE_DIALOG                    = 4,
	WTYPE_VMENU                     = 5,
	WTYPE_HELP                      = 6,
	WTYPE_COMBOBOX                  = 7,
	WTYPE_GRABBER                   = 8,
	WTYPE_HMENU                     = 9,
};

typedef unsigned long long WINDOWINFO_FLAGS;
static WINDOWINFO_FLAGS
	WIF_MODIFIED = 0x0000000000000001ULL,
	WIF_CURRENT  = 0x0000000000000002ULL,
	WIF_MODAL    = 0x0000000000000004ULL,
	WIF_NONE     = 0;

struct WindowInfo
{
	size_t StructSize;
	intptr_t Id;
	wchar_t *TypeName;
	wchar_t *Name;
	intptr_t TypeNameSize;
	intptr_t NameSize;
	intptr_t Pos;
	enum WINDOWINFO_TYPE Type;
	WINDOWINFO_FLAGS Flags;
};

struct WindowType
{
	size_t StructSize;
	enum WINDOWINFO_TYPE Type;
};

enum TASKBARPROGRESSTATE
{
	TBPS_NOPROGRESS   =0x0,
	TBPS_INDETERMINATE=0x1,
	TBPS_NORMAL       =0x2,
	TBPS_ERROR        =0x4,
	TBPS_PAUSED       =0x8,
};

struct ProgressValue
{
	size_t StructSize;
	unsigned long long Completed;
	unsigned long long Total;
};

enum VIEWER_CONTROL_COMMANDS
{
	VCTL_GETINFO                    = 0,
	VCTL_QUIT                       = 1,
	VCTL_REDRAW                     = 2,
	VCTL_SETKEYBAR                  = 3,
	VCTL_SETPOSITION                = 4,
	VCTL_SELECT                     = 5,
	VCTL_SETMODE                    = 6,
	VCTL_GETFILENAME                = 7,
};

typedef unsigned long long VIEWER_OPTIONS;
static VIEWER_OPTIONS
	VOPT_SAVEFILEPOSITION   = 0x0000000000000001ULL,
	VOPT_AUTODETECTCODEPAGE = 0x0000000000000002ULL,
	VOPT_SHOWTITLEBAR       = 0x0000000000000004ULL,
	VOPT_SHOWKEYBAR         = 0x0000000000000008ULL,
	VOPT_SHOWSCROLLBAR      = 0x0000000000000010ULL,
	VOPT_QUICKVIEW          = 0x0000000000000020ULL,
	VOPT_NONE               = 0;

enum VIEWER_SETMODE_TYPES
{
	VSMT_VIEWMODE                   = 0,
	VSMT_WRAP                       = 1,
	VSMT_WORDWRAP                   = 2,
};

typedef unsigned long long VIEWER_SETMODEFLAGS_TYPES;
static VIEWER_SETMODEFLAGS_TYPES
	VSMFL_REDRAW    = 0x0000000000000001ULL,
	VSMFL_NONE      = 0;

struct ViewerSetMode
{
	size_t StructSize;
	enum VIEWER_SETMODE_TYPES Type;
	union
	{
		intptr_t iParam;
		wchar_t *wszParam;
	}

	Param

	;
	VIEWER_SETMODEFLAGS_TYPES Flags;
};

struct ViewerSelect
{
	size_t StructSize;
	long long BlockStartPos;
	long long BlockLen;
};

typedef unsigned long long VIEWER_SETPOS_FLAGS;
static VIEWER_SETPOS_FLAGS
	VSP_NOREDRAW    = 0x0000000000000001ULL,
	VSP_PERCENT     = 0x0000000000000002ULL,
	VSP_RELATIVE    = 0x0000000000000004ULL,
	VSP_NORETNEWPOS = 0x0000000000000008ULL,
	VSP_NONE        = 0;

struct ViewerSetPosition
{
	size_t StructSize;
	VIEWER_SETPOS_FLAGS Flags;
	long long StartPos;
	long long LeftPos;
};

typedef unsigned long long VIEWER_MODE_FLAGS;
static VIEWER_MODE_FLAGS
	VMF_WRAP     = 0x0000000000000001ULL,
	VMF_WORDWRAP = 0x0000000000000002ULL,
	VMF_NONE     = 0;

enum VIEWER_MODE_TYPE
{
	VMT_TEXT    =0,
	VMT_HEX     =1,
	VMT_DUMP    =2,
};

struct ViewerMode
{
	uintptr_t CodePage;
	VIEWER_MODE_FLAGS Flags;
	enum VIEWER_MODE_TYPE ViewMode;
};

struct ViewerInfo
{
	size_t StructSize;
	intptr_t ViewerID;
	intptr_t TabSize;
	struct ViewerMode CurMode;
	long long FileSize;
	long long FilePos;
	long long LeftPos;
	VIEWER_OPTIONS Options;
	intptr_t WindowSizeX;
	intptr_t WindowSizeY;
};

enum VIEWER_EVENTS
{
	VE_READ       =0,
	VE_CLOSE      =1,

	VE_GOTFOCUS   =6,
	VE_KILLFOCUS  =7,
};


enum EDITOR_EVENTS
{
	EE_READ       =0,
	EE_SAVE       =1,
	EE_REDRAW     =2,
	EE_CLOSE      =3,

	EE_GOTFOCUS   =6,
	EE_KILLFOCUS  =7,
	EE_CHANGE     =8,
};

enum DIALOG_EVENTS
{
	DE_DLGPROCINIT    =0,
	DE_DEFDLGPROCINIT =1,
	DE_DLGPROCEND     =2,
};

enum SYNCHRO_EVENTS
{
	SE_COMMONSYNCHRO  =0,
};





enum EDITOR_CONTROL_COMMANDS
{
	ECTL_GETSTRING                  = 0,
	ECTL_SETSTRING                  = 1,
	ECTL_INSERTSTRING               = 2,
	ECTL_DELETESTRING               = 3,
	ECTL_DELETECHAR                 = 4,
	ECTL_INSERTTEXT                 = 5,
	ECTL_GETINFO                    = 6,
	ECTL_SETPOSITION                = 7,
	ECTL_SELECT                     = 8,
	ECTL_REDRAW                     = 9,
	ECTL_TABTOREAL                  = 10,
	ECTL_REALTOTAB                  = 11,
	ECTL_EXPANDTABS                 = 12,
	ECTL_SETTITLE                   = 13,
	ECTL_READINPUT                  = 14,
	ECTL_PROCESSINPUT               = 15,
	ECTL_ADDCOLOR                   = 16,
	ECTL_GETCOLOR                   = 17,
	ECTL_SAVEFILE                   = 18,
	ECTL_QUIT                       = 19,
	ECTL_SETKEYBAR                  = 20,

	ECTL_SETPARAM                   = 22,
	ECTL_GETBOOKMARKS               = 23,
	ECTL_DELETEBLOCK                = 25,
	ECTL_ADDSESSIONBOOKMARK         = 26,
	ECTL_PREVSESSIONBOOKMARK        = 27,
	ECTL_NEXTSESSIONBOOKMARK        = 28,
	ECTL_CLEARSESSIONBOOKMARKS      = 29,
	ECTL_DELETESESSIONBOOKMARK      = 30,
	ECTL_GETSESSIONBOOKMARKS        = 31,
	ECTL_UNDOREDO                   = 32,
	ECTL_GETFILENAME                = 33,
	ECTL_DELCOLOR                   = 34,
	ECTL_SUBSCRIBECHANGEEVENT       = 36,
	ECTL_UNSUBSCRIBECHANGEEVENT     = 37,
	ECTL_GETTITLE                   = 38,
};

enum EDITOR_SETPARAMETER_TYPES
{
	ESPT_TABSIZE                    = 0,
	ESPT_EXPANDTABS                 = 1,
	ESPT_AUTOINDENT                 = 2,
	ESPT_CURSORBEYONDEOL            = 3,
	ESPT_CHARCODEBASE               = 4,
	ESPT_CODEPAGE                   = 5,
	ESPT_SAVEFILEPOSITION           = 6,
	ESPT_LOCKMODE                   = 7,
	ESPT_SETWORDDIV                 = 8,
	ESPT_GETWORDDIV                 = 9,
	ESPT_SHOWWHITESPACE             = 10,
	ESPT_SETBOM                     = 11,
};



struct EditorSetParameter
{
	size_t StructSize;
	enum EDITOR_SETPARAMETER_TYPES Type;
	union
	{
		intptr_t iParam;
		wchar_t *wszParam;
		intptr_t Reserved;
	}

	Param

	;
	unsigned long long Flags;
	size_t Size;
};


enum EDITOR_UNDOREDO_COMMANDS
{
	EUR_BEGIN                       = 0,
	EUR_END                         = 1,
	EUR_UNDO                        = 2,
	EUR_REDO                        = 3,
};


struct EditorUndoRedo
{
	size_t StructSize;
	enum EDITOR_UNDOREDO_COMMANDS Command;
};

struct EditorGetString
{
	size_t StructSize;
	intptr_t StringNumber;
	intptr_t StringLength;
	 wchar_t *StringText;
	 wchar_t *StringEOL;
	intptr_t SelStart;
	intptr_t SelEnd;
};


struct EditorSetString
{
	size_t StructSize;
	intptr_t StringNumber;
	intptr_t StringLength;
	 wchar_t *StringText;
	 wchar_t *StringEOL;
};

enum EXPAND_TABS
{
	EXPAND_NOTABS                   = 0,
	EXPAND_ALLTABS                  = 1,
	EXPAND_NEWTABS                  = 2,
};


enum EDITOR_OPTIONS
{
	EOPT_EXPANDALLTABS     = 0x00000001,
	EOPT_PERSISTENTBLOCKS  = 0x00000002,
	EOPT_DELREMOVESBLOCKS  = 0x00000004,
	EOPT_AUTOINDENT        = 0x00000008,
	EOPT_SAVEFILEPOSITION  = 0x00000010,
	EOPT_AUTODETECTCODEPAGE= 0x00000020,
	EOPT_CURSORBEYONDEOL   = 0x00000040,
	EOPT_EXPANDONLYNEWTABS = 0x00000080,
	EOPT_SHOWWHITESPACE    = 0x00000100,
	EOPT_BOM               = 0x00000200,
	EOPT_SHOWLINEBREAK     = 0x00000400,
	EOPT_SHOWTITLEBAR      = 0x00000800,
	EOPT_SHOWKEYBAR        = 0x00001000,
	EOPT_SHOWSCROLLBAR     = 0x00002000,
};


enum EDITOR_BLOCK_TYPES
{
	BTYPE_NONE                      = 0,
	BTYPE_STREAM                    = 1,
	BTYPE_COLUMN                    = 2,
};

enum EDITOR_CURRENTSTATE
{
	ECSTATE_MODIFIED       = 0x00000001,
	ECSTATE_SAVED          = 0x00000002,
	ECSTATE_LOCKED         = 0x00000004,
};


struct EditorInfo
{
	size_t StructSize;
	intptr_t EditorID;
	intptr_t WindowSizeX;
	intptr_t WindowSizeY;
	intptr_t TotalLines;
	intptr_t CurLine;
	intptr_t CurPos;
	intptr_t CurTabPos;
	intptr_t TopScreenLine;
	intptr_t LeftPos;
	intptr_t Overtype;
	intptr_t BlockType;
	intptr_t BlockStartLine;
	uintptr_t Options;
	intptr_t TabSize;
	size_t BookmarkCount;
	size_t SessionBookmarkCount;
	uintptr_t CurState;
	uintptr_t CodePage;
};

struct EditorBookmarks
{
	size_t StructSize;
	size_t Size;
	size_t Count;
	intptr_t *Line;
	intptr_t *Cursor;
	intptr_t *ScreenLine;
	intptr_t *LeftPos;
};

struct EditorSetPosition
{
	size_t StructSize;
	intptr_t CurLine;
	intptr_t CurPos;
	intptr_t CurTabPos;
	intptr_t TopScreenLine;
	intptr_t LeftPos;
	intptr_t Overtype;
};


struct EditorSelect
{
	size_t StructSize;
	intptr_t BlockType;
	intptr_t BlockStartLine;
	intptr_t BlockStartPos;
	intptr_t BlockWidth;
	intptr_t BlockHeight;
};


struct EditorConvertPos
{
	size_t StructSize;
	intptr_t StringNumber;
	intptr_t SrcPos;
	intptr_t DestPos;
};

typedef unsigned long long EDITORCOLORFLAGS;
static EDITORCOLORFLAGS
	ECF_TABMARKFIRST   = 0x0000000000000001ULL,
	ECF_TABMARKCURRENT = 0x0000000000000002ULL,
	ECF_AUTODELETE     = 0x0000000000000004ULL,
	ECF_NONE           = 0;

struct EditorColor
{
	size_t StructSize;
	intptr_t StringNumber;
	intptr_t ColorItem;
	intptr_t StartPos;
	intptr_t EndPos;
	uintptr_t Priority;
	EDITORCOLORFLAGS Flags;
	struct FarColor Color;
	GUID Owner;
};

struct EditorDeleteColor
{
	size_t StructSize;
	GUID Owner;
	intptr_t StringNumber;
	intptr_t StartPos;
};



struct EditorSaveFile
{
	size_t StructSize;
	 wchar_t *FileName;
	 wchar_t *FileEOL;
	uintptr_t CodePage;
};

enum EDITOR_CHANGETYPE
{
	ECTYPE_CHANGED = 0,
	ECTYPE_ADDED   = 1,
	ECTYPE_DELETED = 2,
};

struct EditorChange
{
	size_t StructSize;
	enum EDITOR_CHANGETYPE Type;
	intptr_t StringNumber;
};

struct EditorSubscribeChangeEvent
{
	size_t StructSize;
	GUID PluginId;
};

typedef unsigned long long INPUTBOXFLAGS;
static INPUTBOXFLAGS
	FIB_ENABLEEMPTY      = 0x0000000000000001ULL,
	FIB_PASSWORD         = 0x0000000000000002ULL,
	FIB_EXPANDENV        = 0x0000000000000004ULL,
	FIB_NOUSELASTHISTORY = 0x0000000000000008ULL,
	FIB_BUTTONS          = 0x0000000000000010ULL,
	FIB_NOAMPERSAND      = 0x0000000000000020ULL,
	FIB_EDITPATH         = 0x0000000000000040ULL,
	FIB_EDITPATHEXEC     = 0x0000000000000080ULL,
	FIB_NONE             = 0;

typedef intptr_t (WINAPI *FARAPIINPUTBOX)(
	 GUID* PluginId,
	 GUID* Id,
	 wchar_t *Title,
	 wchar_t *SubTitle,
	 wchar_t *HistoryName,
	 wchar_t *SrcText,
	wchar_t *DestText,
	size_t DestSize,
	 wchar_t *HelpTopic,
	INPUTBOXFLAGS Flags
);

enum FAR_PLUGINS_CONTROL_COMMANDS
{
	PCTL_LOADPLUGIN           = 0,
	PCTL_UNLOADPLUGIN         = 1,
	PCTL_FORCEDLOADPLUGIN     = 2,
	PCTL_FINDPLUGIN           = 3,
	PCTL_GETPLUGININFORMATION = 4,
	PCTL_GETPLUGINS           = 5,
};

enum FAR_PLUGIN_LOAD_TYPE
{
	PLT_PATH = 0,
};

enum FAR_PLUGIN_FIND_TYPE
{
	PFM_GUID       = 0,
	PFM_MODULENAME = 1,
};

typedef unsigned long long FAR_PLUGIN_FLAGS;
static FAR_PLUGIN_FLAGS
	FPF_LOADED         = 0x0000000000000001ULL,
	FPF_ANSI           = 0x1000000000000000ULL,
	FPF_NONE           = 0;

enum FAR_FILE_FILTER_CONTROL_COMMANDS
{
	FFCTL_CREATEFILEFILTER          = 0,
	FFCTL_FREEFILEFILTER            = 1,
	FFCTL_OPENFILTERSMENU           = 2,
	FFCTL_STARTINGTOFILTER          = 3,
	FFCTL_ISFILEINFILTER            = 4,
};

enum FAR_FILE_FILTER_TYPE
{
	FFT_PANEL                       = 0,
	FFT_FINDFILE                    = 1,
	FFT_COPY                        = 2,
	FFT_SELECT                      = 3,
	FFT_CUSTOM                      = 4,
};

enum FAR_REGEXP_CONTROL_COMMANDS
{
	RECTL_CREATE                    = 0,
	RECTL_FREE                      = 1,
	RECTL_COMPILE                   = 2,
	RECTL_OPTIMIZE                  = 3,
	RECTL_MATCHEX                   = 4,
	RECTL_SEARCHEX                  = 5,
	RECTL_BRACKETSCOUNT             = 6,
};

struct RegExpMatch
{
	intptr_t start,end;
};

struct RegExpSearch
{
	 wchar_t* Text;
	intptr_t Position;
	intptr_t Length;
	struct RegExpMatch* Match;
	intptr_t Count;
	void* Reserved;
};

enum FAR_SETTINGS_CONTROL_COMMANDS
{
	SCTL_CREATE                     = 0,
	SCTL_FREE                       = 1,
	SCTL_SET                        = 2,
	SCTL_GET                        = 3,
	SCTL_ENUM                       = 4,
	SCTL_DELETE                     = 5,
	SCTL_CREATESUBKEY               = 6,
	SCTL_OPENSUBKEY                 = 7,
};

enum FARSETTINGSTYPES
{
	FST_UNKNOWN                     = 0,
	FST_SUBKEY                      = 1,
	FST_QWORD                       = 2,
	FST_STRING                      = 3,
	FST_DATA                        = 4,
};

enum FARSETTINGS_SUBFOLDERS
{
	FSSF_ROOT                       =  0,
	FSSF_HISTORY_CMD                =  1,
	FSSF_HISTORY_FOLDER             =  2,
	FSSF_HISTORY_VIEW               =  3,
	FSSF_HISTORY_EDIT               =  4,
	FSSF_HISTORY_EXTERNAL           =  5,
	FSSF_FOLDERSHORTCUT_0           =  6,
	FSSF_FOLDERSHORTCUT_1           =  7,
	FSSF_FOLDERSHORTCUT_2           =  8,
	FSSF_FOLDERSHORTCUT_3           =  9,
	FSSF_FOLDERSHORTCUT_4           = 10,
	FSSF_FOLDERSHORTCUT_5           = 11,
	FSSF_FOLDERSHORTCUT_6           = 12,
	FSSF_FOLDERSHORTCUT_7           = 13,
	FSSF_FOLDERSHORTCUT_8           = 14,
	FSSF_FOLDERSHORTCUT_9           = 15,
	FSSF_CONFIRMATIONS              = 16,
	FSSF_SYSTEM                     = 17,
	FSSF_PANEL                      = 18,
	FSSF_EDITOR                     = 19,
	FSSF_SCREEN                     = 20,
	FSSF_DIALOG                     = 21,
	FSSF_INTERFACE                  = 22,
	FSSF_PANELLAYOUT                = 23,
};

enum FAR_PLUGIN_SETTINGS_LOCATION
{
	PSL_ROAMING = 0,
	PSL_LOCAL   = 1,
};

struct FarSettingsCreate
{
	size_t StructSize;
	GUID Guid;
	HANDLE Handle;
};

struct FarSettingsItem
{
	size_t StructSize;
	size_t Root;
	 wchar_t* Name;
	enum FARSETTINGSTYPES Type;
	union
	{
		unsigned long long Number;
		 wchar_t* String;
		struct
		{
			size_t Size;
			 void* Data;
		} Data;
	}

	Value

	;
};

struct FarSettingsName
{
	 wchar_t* Name;
	enum FARSETTINGSTYPES Type;
};

struct FarSettingsHistory
{
	 wchar_t* Name;
	 wchar_t* Param;
	GUID PluginId;
	 wchar_t* File;
	FILETIME Time;
	int Lock;
};

struct FarSettingsEnum
{
	size_t StructSize;
	size_t Root;
	size_t Count;
	union
	{
		 struct FarSettingsName* Items;
		 struct FarSettingsHistory* Histories;
	}

	Value

	;
};

struct FarSettingsValue
{
	size_t StructSize;
	size_t Root;
	 wchar_t* Value;
};

typedef intptr_t (WINAPI *FARAPIPANELCONTROL)(
	HANDLE hPanel,
	enum FILE_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t(WINAPI *FARAPIADVCONTROL)(
	 GUID* PluginId,
	enum ADVANCED_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIVIEWERCONTROL)(
	intptr_t ViewerID,
	enum VIEWER_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIEDITORCONTROL)(
	intptr_t EditorID,
	enum EDITOR_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIMACROCONTROL)(
	 GUID* PluginId,
	enum FAR_MACRO_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIPLUGINSCONTROL)(
	HANDLE hHandle,
	enum FAR_PLUGINS_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIFILEFILTERCONTROL)(
	HANDLE hHandle,
	enum FAR_FILE_FILTER_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPIREGEXPCONTROL)(
	HANDLE hHandle,
	enum FAR_REGEXP_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

typedef intptr_t (WINAPI *FARAPISETTINGSCONTROL)(
	HANDLE hHandle,
	enum FAR_SETTINGS_CONTROL_COMMANDS Command,
	intptr_t Param1,
	void* Param2
);

enum FARCLIPBOARD_TYPE
{
	FCT_ANY=0,
	FCT_STREAM=1,
	FCT_COLUMN=2
};
//#line 2111 "far3-include/plugin.hpp"
typedef int ( *FARSTDSPRINTF)(wchar_t *Buffer, wchar_t *Format);
typedef int ( *FARSTDSNPRINTF)(wchar_t *Buffer,size_t Sizebuf, wchar_t *Format);
typedef int ( *FARSTDSSCANF)( wchar_t *Buffer, wchar_t *Format);


typedef void (WINAPI *FARSTDQSORT)(void *base, size_t nelem, size_t width, int (WINAPI *fcmp)( void *, void *,void *userparam),void *userparam);
typedef void   *(WINAPI *FARSTDBSEARCH)( void *key, void *base, size_t nelem, size_t width, int (WINAPI *fcmp)( void *, void *,void *userparam),void *userparam);
typedef size_t (WINAPI *FARSTDGETFILEOWNER)( wchar_t *Computer, wchar_t *Name,wchar_t *Owner,size_t Size);
typedef size_t (WINAPI *FARSTDGETNUMBEROFLINKS)( wchar_t *Name);
typedef int (WINAPI *FARSTDATOI)( wchar_t *s);
typedef long long (WINAPI *FARSTDATOI64)( wchar_t *s);
typedef wchar_t   *(WINAPI *FARSTDITOA64)(long long value, wchar_t *Str, int radix);
typedef wchar_t   *(WINAPI *FARSTDITOA)(int value, wchar_t *Str, int radix);
typedef wchar_t   *(WINAPI *FARSTDLTRIM)(wchar_t *Str);
typedef wchar_t   *(WINAPI *FARSTDRTRIM)(wchar_t *Str);
typedef wchar_t   *(WINAPI *FARSTDTRIM)(wchar_t *Str);
typedef wchar_t   *(WINAPI *FARSTDTRUNCSTR)(wchar_t *Str,intptr_t MaxLength);
typedef wchar_t   *(WINAPI *FARSTDTRUNCPATHSTR)(wchar_t *Str,intptr_t MaxLength);
typedef wchar_t   *(WINAPI *FARSTDQUOTESPACEONLY)(wchar_t *Str);
typedef wchar_t*(WINAPI *FARSTDPOINTTONAME)( wchar_t *Path);
typedef int (WINAPI *FARSTDADDENDSLASH)(wchar_t *Path);
typedef int (WINAPI *FARSTDCOPYTOCLIPBOARD)(enum FARCLIPBOARD_TYPE Type, wchar_t *Data);
typedef size_t (WINAPI *FARSTDPASTEFROMCLIPBOARD)(enum FARCLIPBOARD_TYPE Type, wchar_t *Data, size_t Size);
typedef int (WINAPI *FARSTDLOCALISLOWER)(wchar_t Ch);
typedef int (WINAPI *FARSTDLOCALISUPPER)(wchar_t Ch);
typedef int (WINAPI *FARSTDLOCALISALPHA)(wchar_t Ch);
typedef int (WINAPI *FARSTDLOCALISALPHANUM)(wchar_t Ch);
typedef wchar_t (WINAPI *FARSTDLOCALUPPER)(wchar_t LowerChar);
typedef wchar_t (WINAPI *FARSTDLOCALLOWER)(wchar_t UpperChar);
typedef void (WINAPI *FARSTDLOCALUPPERBUF)(wchar_t *Buf,intptr_t Length);
typedef void (WINAPI *FARSTDLOCALLOWERBUF)(wchar_t *Buf,intptr_t Length);
typedef void (WINAPI *FARSTDLOCALSTRUPR)(wchar_t *s1);
typedef void (WINAPI *FARSTDLOCALSTRLWR)(wchar_t *s1);
typedef int (WINAPI *FARSTDLOCALSTRICMP)( wchar_t *s1, wchar_t *s2);
typedef int (WINAPI *FARSTDLOCALSTRNICMP)( wchar_t *s1, wchar_t *s2,intptr_t n);
typedef unsigned long long (WINAPI *FARSTDFARCLOCK)(void);
typedef int (WINAPI *FARSTDCOMPARESTRINGS)( wchar_t*Str1, size_t Size1, wchar_t* Str2, size_t Size2);

typedef unsigned long long PROCESSNAME_FLAGS;
static PROCESSNAME_FLAGS



	PN_CMPNAME          = 0x0000000000000000ULL,
	PN_CMPNAMELIST      = 0x0000000000010000ULL,
	PN_GENERATENAME     = 0x0000000000020000ULL,
	PN_CHECKMASK        = 0x0000000000030000ULL,

	PN_SKIPPATH         = 0x0000000001000000ULL,
	PN_SHOWERRORMESSAGE = 0x0000000002000000ULL,
	PN_NONE             = 0;

typedef size_t (WINAPI *FARSTDPROCESSNAME)( wchar_t *param1, wchar_t *param2, size_t size, PROCESSNAME_FLAGS flags);

typedef void (WINAPI *FARSTDUNQUOTE)(wchar_t *Str);

typedef unsigned long long XLAT_FLAGS;
static XLAT_FLAGS
	XLAT_SWITCHKEYBLAYOUT  = 0x0000000000000001ULL,
	XLAT_SWITCHKEYBBEEP    = 0x0000000000000002ULL,
	XLAT_USEKEYBLAYOUTNAME = 0x0000000000000004ULL,
	XLAT_CONVERTALLCMDLINE = 0x0000000000010000ULL,
	XLAT_NONE              = 0;

typedef size_t (WINAPI *FARSTDINPUTRECORDTOKEYNAME)( INPUT_RECORD* Key, wchar_t *KeyText, size_t Size);

typedef wchar_t*(WINAPI *FARSTDXLAT)(wchar_t *Line,intptr_t StartPos,intptr_t EndPos,XLAT_FLAGS Flags);

typedef int (WINAPI *FARSTDKEYNAMETOINPUTRECORD)( wchar_t *Name,INPUT_RECORD* Key);

typedef int (WINAPI *FRSUSERFUNC)(
	 struct PluginPanelItem *FData,
	 wchar_t *FullName,
	void *Param
);

typedef unsigned long long FRSMODE;
static FRSMODE
	FRS_RETUPDIR             = 0x0000000000000001ULL,
	FRS_RECUR                = 0x0000000000000002ULL,
	FRS_SCANSYMLINK          = 0x0000000000000004ULL,
	FRS_NONE                 = 0;

typedef void (WINAPI *FARSTDRECURSIVESEARCH)( wchar_t *InitDir, wchar_t *Mask,FRSUSERFUNC Func,FRSMODE Flags,void *Param);
typedef size_t (WINAPI *FARSTDMKTEMP)(wchar_t *Dest, size_t DestSize, wchar_t *Prefix);
typedef size_t (WINAPI *FARSTDGETPATHROOT)( wchar_t *Path,wchar_t *Root, size_t DestSize);

enum LINK_TYPE
{
	LINK_HARDLINK         = 1,
	LINK_JUNCTION         = 2,
	LINK_VOLMOUNT         = 3,
	LINK_SYMLINKFILE      = 4,
	LINK_SYMLINKDIR       = 5,
	LINK_SYMLINK          = 6,
};

typedef unsigned long long MKLINK_FLAGS;
static MKLINK_FLAGS
	MLF_SHOWERRMSG       = 0x0000000000010000ULL,
	MLF_DONOTUPDATEPANEL = 0x0000000000020000ULL,
	MLF_HOLDTARGET       = 0x0000000000040000ULL,
	MLF_NONE             = 0;

typedef int (WINAPI *FARSTDMKLINK)( wchar_t *Src, wchar_t *Dest,enum LINK_TYPE Type, MKLINK_FLAGS Flags);
typedef size_t (WINAPI *FARGETREPARSEPOINTINFO)( wchar_t *Src, wchar_t *Dest, size_t DestSize);

enum CONVERTPATHMODES
{
	CPM_FULL                        = 0,
	CPM_REAL                        = 1,
	CPM_NATIVE                      = 2,
};

typedef size_t (WINAPI *FARCONVERTPATH)(enum CONVERTPATHMODES Mode, wchar_t *Src, wchar_t *Dest, size_t DestSize);

typedef size_t (WINAPI *FARGETCURRENTDIRECTORY)(size_t Size, wchar_t* Buffer);

typedef unsigned long long FARFORMATFILESIZEFLAGS;
static FARFORMATFILESIZEFLAGS
	FFFS_COMMAS                 = 0x0100000000000000LL,
	FFFS_FLOATSIZE              = 0x0200000000000000LL,
	FFFS_SHOWBYTESINDEX         = 0x0400000000000000LL,
	FFFS_ECONOMIC               = 0x0800000000000000LL,
	FFFS_THOUSAND               = 0x1000000000000000LL,
	FFFS_MINSIZEINDEX           = 0x2000000000000000LL,
	FFFS_MINSIZEINDEX_MASK      = 0x0000000000000003LL,
	FFFS_NONE                   = 0;

typedef size_t (WINAPI *FARFORMATFILESIZE)(unsigned long long Size, intptr_t Width, FARFORMATFILESIZEFLAGS Flags, wchar_t *Dest, size_t DestSize);

typedef struct FarStandardFunctions
{
	size_t StructSize;

	FARSTDATOI                 atoi;
	FARSTDATOI64               atoi64;
	FARSTDITOA                 itoa;
	FARSTDITOA64               itoa64;

	FARSTDSPRINTF              sprintf;
	FARSTDSSCANF               sscanf;

	FARSTDQSORT                qsort;
	FARSTDBSEARCH              bsearch;

	FARSTDSNPRINTF             snprintf;


	FARSTDLOCALISLOWER         LIsLower;
	FARSTDLOCALISUPPER         LIsUpper;
	FARSTDLOCALISALPHA         LIsAlpha;
	FARSTDLOCALISALPHANUM      LIsAlphanum;
	FARSTDLOCALUPPER           LUpper;
	FARSTDLOCALLOWER           LLower;
	FARSTDLOCALUPPERBUF        LUpperBuf;
	FARSTDLOCALLOWERBUF        LLowerBuf;
	FARSTDLOCALSTRUPR          LStrupr;
	FARSTDLOCALSTRLWR          LStrlwr;
	FARSTDLOCALSTRICMP         LStricmp;
	FARSTDLOCALSTRNICMP        LStrnicmp;

	FARSTDUNQUOTE              Unquote;
	FARSTDLTRIM                LTrim;
	FARSTDRTRIM                RTrim;
	FARSTDTRIM                 Trim;
	FARSTDTRUNCSTR             TruncStr;
	FARSTDTRUNCPATHSTR         TruncPathStr;
	FARSTDQUOTESPACEONLY       QuoteSpaceOnly;
	FARSTDPOINTTONAME          PointToName;
	FARSTDGETPATHROOT          GetPathRoot;
	FARSTDADDENDSLASH          AddEndSlash;
	FARSTDCOPYTOCLIPBOARD      CopyToClipboard;
	FARSTDPASTEFROMCLIPBOARD   PasteFromClipboard;
	FARSTDINPUTRECORDTOKEYNAME FarInputRecordToName;
	FARSTDKEYNAMETOINPUTRECORD FarNameToInputRecord;
	FARSTDXLAT                 XLat;
	FARSTDGETFILEOWNER         GetFileOwner;
	FARSTDGETNUMBEROFLINKS     GetNumberOfLinks;
	FARSTDRECURSIVESEARCH      FarRecursiveSearch;
	FARSTDMKTEMP               MkTemp;
	FARSTDPROCESSNAME          ProcessName;
	FARSTDMKLINK               MkLink;
	FARCONVERTPATH             ConvertPath;
	FARGETREPARSEPOINTINFO     GetReparsePointInfo;
	FARGETCURRENTDIRECTORY     GetCurrentDirectory;
	FARFORMATFILESIZE          FormatFileSize;
	FARSTDFARCLOCK             FarClock;
	FARSTDCOMPARESTRINGS       CompareStrings;
} FARSTANDARDFUNCTIONS;

struct PluginStartupInfo
{
	size_t StructSize;
	 wchar_t *ModuleName;
	FARAPIMENU             Menu;
	FARAPIMESSAGE          Message;
	FARAPIGETMSG           GetMsg;
	FARAPIPANELCONTROL     PanelControl;
	FARAPISAVESCREEN       SaveScreen;
	FARAPIRESTORESCREEN    RestoreScreen;
	FARAPIGETDIRLIST       GetDirList;
	FARAPIGETPLUGINDIRLIST GetPluginDirList;
	FARAPIFREEDIRLIST      FreeDirList;
	FARAPIFREEPLUGINDIRLIST FreePluginDirList;
	FARAPIVIEWER           Viewer;
	FARAPIEDITOR           Editor;
	FARAPITEXT             Text;
	FARAPIEDITORCONTROL    EditorControl;

	FARSTANDARDFUNCTIONS  *FSF;

	FARAPISHOWHELP         ShowHelp;
	FARAPIADVCONTROL       AdvControl;
	FARAPIINPUTBOX         InputBox;
	FARAPICOLORDIALOG      ColorDialog;
	FARAPIDIALOGINIT       DialogInit;
	FARAPIDIALOGRUN        DialogRun;
	FARAPIDIALOGFREE       DialogFree;

	FARAPISENDDLGMESSAGE   SendDlgMessage;
	FARAPIDEFDLGPROC       DefDlgProc;
	FARAPIVIEWERCONTROL    ViewerControl;
	FARAPIPLUGINSCONTROL   PluginsControl;
	FARAPIFILEFILTERCONTROL FileFilterControl;
	FARAPIREGEXPCONTROL    RegExpControl;
	FARAPIMACROCONTROL     MacroControl;
	FARAPISETTINGSCONTROL  SettingsControl;
	 void*            Private;
	void*                  Instance;
	FARAPIFREESCREEN       FreeScreen;
};

typedef HANDLE (WINAPI *FARAPICREATEFILE)( wchar_t *Object,unsigned long DesiredAccess,unsigned long ShareMode,LPSECURITY_ATTRIBUTES SecurityAttributes,unsigned long CreationDistribution,unsigned long FlagsAndAttributes,HANDLE TemplateFile);
typedef unsigned long (WINAPI *FARAPIGETFILEATTRIBUTES)( wchar_t *FileName);
typedef int (WINAPI *FARAPISETFILEATTRIBUTES)( wchar_t *FileName,unsigned long dwFileAttributes);
typedef int (WINAPI *FARAPIMOVEFILEEX)( wchar_t *ExistingFileName, wchar_t *NewFileName,unsigned long dwFlags);
typedef int (WINAPI *FARAPIDELETEFILE)( wchar_t *FileName);
typedef int (WINAPI *FARAPIREMOVEDIRECTORY)( wchar_t *DirName);
typedef int (WINAPI *FARAPICREATEDIRECTORY)( wchar_t *PathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);

struct ArclitePrivateInfo
{
	size_t StructSize;
	FARAPICREATEFILE CreateFile;
	FARAPIGETFILEATTRIBUTES GetFileAttributes;
	FARAPISETFILEATTRIBUTES SetFileAttributes;
	FARAPIMOVEFILEEX MoveFileEx;
	FARAPIDELETEFILE DeleteFile;
	FARAPIREMOVEDIRECTORY RemoveDirectory;
	FARAPICREATEDIRECTORY CreateDirectory;
};

struct NetBoxPrivateInfo
{
	size_t StructSize;
	FARAPICREATEFILE CreateFile;
	FARAPIGETFILEATTRIBUTES GetFileAttributes;
	FARAPISETFILEATTRIBUTES SetFileAttributes;
	FARAPIMOVEFILEEX MoveFileEx;
	FARAPIDELETEFILE DeleteFile;
	FARAPIREMOVEDIRECTORY RemoveDirectory;
	FARAPICREATEDIRECTORY CreateDirectory;
};

struct MacroPluginReturn
{
	intptr_t ReturnType;
	size_t Count;
	struct FarMacroValue *Values;
};

typedef intptr_t (WINAPI *FARAPICALLFAR)(intptr_t CheckCode, struct FarMacroCall* Data);

struct MacroPrivateInfo
{
	size_t StructSize;
	FARAPICALLFAR CallFar;
};

typedef unsigned long long PLUGIN_FLAGS;
static PLUGIN_FLAGS
	PF_PRELOAD        = 0x0000000000000001ULL,
	PF_DISABLEPANELS  = 0x0000000000000002ULL,
	PF_EDITOR         = 0x0000000000000004ULL,
	PF_VIEWER         = 0x0000000000000008ULL,
	PF_FULLCMDLINE    = 0x0000000000000010ULL,
	PF_DIALOG         = 0x0000000000000020ULL,
	PF_NONE           = 0;

struct PluginMenuItem
{
	 GUID* Guids;
	 wchar_t * *Strings;
	size_t Count;
};

enum VERSION_STAGE
{
	VS_RELEASE                      = 0,
	VS_ALPHA                        = 1,
	VS_BETA                         = 2,
	VS_RC                           = 3,
	VS_SPECIAL                      = 4,
	VS_PRIVATE                      = 5,
};

struct VersionInfo
{
	unsigned long Major;
	unsigned long Minor;
	unsigned long Revision;
	unsigned long Build;
	enum VERSION_STAGE Stage;
};
//#line 2446 "far3-include/plugin.hpp"
struct GlobalInfo
{
	size_t StructSize;
	struct VersionInfo MinFarVersion;
	struct VersionInfo Version;
	GUID Guid;
	 wchar_t *Title;
	 wchar_t *Description;
	 wchar_t *Author;
	void* Instance;
};

struct PluginInfo
{
	size_t StructSize;
	PLUGIN_FLAGS Flags;
	struct PluginMenuItem DiskMenu;
	struct PluginMenuItem PluginMenu;
	struct PluginMenuItem PluginConfig;
	 wchar_t *CommandPrefix;
	void* Instance;
};

struct FarGetPluginInformation
{
	size_t StructSize;
	 wchar_t *ModuleName;
	FAR_PLUGIN_FLAGS Flags;
	struct PluginInfo *PInfo;
	struct GlobalInfo *GInfo;
};

typedef unsigned long long INFOPANELLINE_FLAGS;
static INFOPANELLINE_FLAGS
	IPLFLAGS_SEPARATOR      = 0x0000000000000001ULL,
	IPLFLAGS_NONE           = 0;

struct InfoPanelLine
{
	 wchar_t *Text;
	 wchar_t *Data;
	INFOPANELLINE_FLAGS Flags;
};

typedef unsigned long long PANELMODE_FLAGS;
static PANELMODE_FLAGS
	PMFLAGS_FULLSCREEN      = 0x0000000000000001ULL,
	PMFLAGS_DETAILEDSTATUS  = 0x0000000000000002ULL,
	PMFLAGS_ALIGNEXTENSIONS = 0x0000000000000004ULL,
	PMFLAGS_CASECONVERSION  = 0x0000000000000008ULL,
	PMFLAGS_NONE            = 0;

struct PanelMode
{
	 wchar_t *ColumnTypes;
	 wchar_t *ColumnWidths;
	 wchar_t * *ColumnTitles;
	 wchar_t *StatusColumnTypes;
	 wchar_t *StatusColumnWidths;
	PANELMODE_FLAGS Flags;
};

typedef unsigned long long OPENPANELINFO_FLAGS;
static OPENPANELINFO_FLAGS
	OPIF_DISABLEFILTER           = 0x0000000000000001ULL,
	OPIF_DISABLESORTGROUPS       = 0x0000000000000002ULL,
	OPIF_DISABLEHIGHLIGHTING     = 0x0000000000000004ULL,
	OPIF_ADDDOTS                 = 0x0000000000000008ULL,
	OPIF_RAWSELECTION            = 0x0000000000000010ULL,
	OPIF_REALNAMES               = 0x0000000000000020ULL,
	OPIF_SHOWNAMESONLY           = 0x0000000000000040ULL,
	OPIF_SHOWRIGHTALIGNNAMES     = 0x0000000000000080ULL,
	OPIF_SHOWPRESERVECASE        = 0x0000000000000100ULL,
	OPIF_COMPAREFATTIME          = 0x0000000000000400ULL,
	OPIF_EXTERNALGET             = 0x0000000000000800ULL,
	OPIF_EXTERNALPUT             = 0x0000000000001000ULL,
	OPIF_EXTERNALDELETE          = 0x0000000000002000ULL,
	OPIF_EXTERNALMKDIR           = 0x0000000000004000ULL,
	OPIF_USEATTRHIGHLIGHTING     = 0x0000000000008000ULL,
	OPIF_USECRC32                = 0x0000000000010000ULL,
	OPIF_USEFREESIZE             = 0x0000000000020000ULL,
	OPIF_SHORTCUT                = 0x0000000000040000ULL,
	OPIF_NONE                    = 0;

struct KeyBarLabel
{
	struct FarKey Key;
	 wchar_t *Text;
	 wchar_t *LongText;
};

struct KeyBarTitles
{
	size_t CountLabels;
	struct KeyBarLabel *Labels;
};

struct FarSetKeyBarTitles
{
	size_t StructSize;
	struct KeyBarTitles *Titles;
};

typedef unsigned long long OPERATION_MODES;
static OPERATION_MODES
	OPM_SILENT     =0x0000000000000001ULL,
	OPM_FIND       =0x0000000000000002ULL,
	OPM_VIEW       =0x0000000000000004ULL,
	OPM_EDIT       =0x0000000000000008ULL,
	OPM_TOPLEVEL   =0x0000000000000010ULL,
	OPM_DESCR      =0x0000000000000020ULL,
	OPM_QUICKVIEW  =0x0000000000000040ULL,
	OPM_PGDN       =0x0000000000000080ULL,
	OPM_COMMANDS   =0x0000000000000100ULL,
	OPM_NONE       =0;

struct OpenPanelInfo
{
	size_t                       StructSize;
	HANDLE                       hPanel;
	OPENPANELINFO_FLAGS          Flags;
	 wchar_t               *HostFile;
	 wchar_t               *CurDir;
	 wchar_t               *Format;
	 wchar_t               *PanelTitle;
	 struct InfoPanelLine  *InfoLines;
	size_t                       InfoLinesNumber;
	 wchar_t *       *DescrFiles;
	size_t                       DescrFilesNumber;
	 struct PanelMode      *PanelModesArray;
	size_t                       PanelModesNumber;
	intptr_t                     StartPanelMode;
	enum OPENPANELINFO_SORTMODES StartSortMode;
	intptr_t                     StartSortOrder;
	 struct KeyBarTitles   *KeyBar;
	 wchar_t               *ShortcutData;
	unsigned long long             FreeSize;
	struct UserDataItem          UserData;
	void* Instance;
};

struct AnalyseInfo
{
	size_t          StructSize;
	 wchar_t  *FileName;
	void           *Buffer;
	size_t          BufferSize;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct OpenAnalyseInfo
{
	size_t StructSize;
	struct AnalyseInfo* Info;
	HANDLE Handle;
};

struct OpenMacroInfo
{
	size_t StructSize;
	size_t Count;
	struct FarMacroValue *Values;
};

typedef unsigned long long FAROPENSHORTCUTFLAGS;
static FAROPENSHORTCUTFLAGS
	FOSF_ACTIVE = 0x0000000000000001ULL,
	FOSF_NONE   = 0;

struct OpenShortcutInfo
{
	size_t StructSize;
	 wchar_t *HostFile;
	 wchar_t *ShortcutData;
	FAROPENSHORTCUTFLAGS Flags;
};

struct OpenCommandLineInfo
{
	size_t StructSize;
	 wchar_t *CommandLine;
};

enum OPENFROM
{
	OPEN_LEFTDISKMENU       = 0,
	OPEN_PLUGINSMENU        = 1,
	OPEN_FINDLIST           = 2,
	OPEN_SHORTCUT           = 3,
	OPEN_COMMANDLINE        = 4,
	OPEN_EDITOR             = 5,
	OPEN_VIEWER             = 6,
	OPEN_FILEPANEL          = 7,
	OPEN_DIALOG             = 8,
	OPEN_ANALYSE            = 9,
	OPEN_RIGHTDISKMENU      = 10,
	OPEN_FROMMACRO          = 11,
	OPEN_LUAMACRO           = 100,
};

enum MACROCALLTYPE
{
	MCT_MACROPARSE         = 0,
	MCT_LOADMACROS         = 1,
	MCT_ENUMMACROS         = 2,
	MCT_WRITEMACROS        = 3,
	MCT_GETMACRO           = 4,
	MCT_RECORDEDMACRO      = 5,
	MCT_DELMACRO           = 6,
	MCT_RUNSTARTMACRO      = 7,
	MCT_EXECSTRING         = 8,
	MCT_PANELSORT          = 9,
	MCT_GETCUSTOMSORTMODES = 10,
	MCT_ADDMACRO           = 11,
	MCT_KEYMACRO           = 12,
	MCT_CANPANELSORT       = 13,
};

enum MACROPLUGINRETURNTYPE
{
	MPRT_NORMALFINISH  = 0,
	MPRT_ERRORFINISH   = 1,
	MPRT_ERRORPARSE    = 2,
	MPRT_KEYS          = 3,
	MPRT_PRINT         = 4,
	MPRT_PLUGINCALL    = 5,
	MPRT_PLUGINMENU    = 6,
	MPRT_PLUGINCONFIG  = 7,
	MPRT_PLUGINCOMMAND = 8,
	MPRT_USERMENU      = 9,
	MPRT_HASNOMACRO    = 10,
};

struct OpenMacroPluginInfo
{
	enum MACROCALLTYPE CallType;
	struct FarMacroCall *Data;
	struct MacroPluginReturn Ret;
};

enum FAR_EVENTS
{
	FE_CHANGEVIEWMODE   =0,
	FE_REDRAW           =1,
	FE_IDLE             =2,
	FE_CLOSE            =3,
	FE_BREAK            =4,
	FE_COMMAND          =5,

	FE_GOTFOCUS         =6,
	FE_KILLFOCUS        =7,
	FE_CHANGESORTPARAMS =8,
};

struct OpenInfo
{
	size_t StructSize;
	enum OPENFROM OpenFrom;
	 GUID* Guid;
	intptr_t Data;
	void* Instance;
};

struct SetDirectoryInfo
{
	size_t StructSize;
	HANDLE hPanel;
	 wchar_t *Dir;
	intptr_t Reserved;
	OPERATION_MODES OpMode;
	struct UserDataItem UserData;
	void* Instance;
};

struct SetFindListInfo
{
	size_t StructSize;
	HANDLE hPanel;
	 struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	void* Instance;
};

struct PutFilesInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	int Move;
	 wchar_t *SrcPath;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct ProcessHostFileInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct MakeDirectoryInfo
{
	size_t StructSize;
	HANDLE hPanel;
	 wchar_t *Name;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct CompareInfo
{
	size_t StructSize;
	HANDLE hPanel;
	 struct PluginPanelItem *Item1;
	 struct PluginPanelItem *Item2;
	enum OPENPANELINFO_SORTMODES Mode;
	void* Instance;
};

struct GetFindDataInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	OPERATION_MODES OpMode;
	void* Instance;
};


struct FreeFindDataInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	void* Instance;
};

struct GetFilesInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	int Move;
	 wchar_t *DestPath;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct DeleteFilesInfo
{
	size_t StructSize;
	HANDLE hPanel;
	struct PluginPanelItem *PanelItem;
	size_t ItemsNumber;
	OPERATION_MODES OpMode;
	void* Instance;
};

struct ProcessPanelInputInfo
{
	size_t StructSize;
	HANDLE hPanel;
	INPUT_RECORD Rec;
	void* Instance;
};

struct ProcessEditorInputInfo
{
	size_t StructSize;
	INPUT_RECORD Rec;
	void* Instance;
};

typedef unsigned long long PROCESSCONSOLEINPUT_FLAGS;
static PROCESSCONSOLEINPUT_FLAGS
	PCIF_NONE     = 0;

struct ProcessConsoleInputInfo
{
	size_t StructSize;
	PROCESSCONSOLEINPUT_FLAGS Flags;
	INPUT_RECORD Rec;
	void* Instance;
};

struct ExitInfo
{
	size_t StructSize;
	void* Instance;
};

struct ProcessPanelEventInfo
{
	size_t StructSize;
	intptr_t Event;
	void* Param;
	HANDLE hPanel;
	void* Instance;
};

struct ProcessEditorEventInfo
{
	size_t StructSize;
	intptr_t Event;
	void* Param;
	intptr_t EditorID;
	void* Instance;
};

struct ProcessDialogEventInfo
{
	size_t StructSize;
	intptr_t Event;
	struct FarDialogEvent* Param;
	void* Instance;
};

struct ProcessSynchroEventInfo
{
	size_t StructSize;
	intptr_t Event;
	void* Param;
	void* Instance;
};

struct ProcessViewerEventInfo
{
	size_t StructSize;
	intptr_t Event;
	void* Param;
	intptr_t ViewerID;
	void* Instance;
};

struct ClosePanelInfo
{
	size_t StructSize;
	HANDLE hPanel;
	void* Instance;
};

struct CloseAnalyseInfo
{
	size_t StructSize;
	HANDLE Handle;
	void* Instance;
};

struct ConfigureInfo
{
	size_t StructSize;
	 GUID* Guid;
	void* Instance;
};

struct GetContentFieldsInfo
{
	size_t StructSize;
	size_t Count;
	 wchar_t* *Names;
	void* Instance;
};

struct GetContentDataInfo
{
	size_t StructSize;
	 wchar_t *FilePath;
	size_t Count;
	 wchar_t* *Names;
	 wchar_t **Values;
	void* Instance;
};

struct ErrorInfo
{
	size_t StructSize;
	 wchar_t* Summary;
	 wchar_t* Description;
};

static GUID FarGuid =
{0x00000000, 0x0000, 0x0000, {0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00}};
